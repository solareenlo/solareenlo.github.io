<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on solareenlo</title><link>https://solareenlo.com/posts/</link><description>Recent content in Blog on solareenlo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://solareenlo.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Human_happy</title><link>https://solareenlo.com/posts/human_happy/</link><pubDate>Fri, 17 Mar 2023 10:54:57 +0900</pubDate><guid>https://solareenlo.com/posts/human_happy/</guid><description>人間が幸せに生きるにはどうすればいいですか？ # 自分自身を大切にすること：自分自身を愛し、尊重し、自分の好みやニーズを認めることが大切です。自分自身を大切にすることで、自己肯定感が高まり、幸福感が増します。
人間関係を大切にすること：良好な人間関係は、幸せな人生に必要不可欠です。家族、友人、同僚など、周りの人々とのつながりを大切にし、積極的にコミュニケーションを取り合いましょう。
健康的なライフスタイルを送ること：健康的な食生活、適度な運動、十分な睡眠、ストレス管理など、健康的なライフスタイルを送ることが、身体的・精神的健康を保ち、幸福感を高めるために必要です。
自分の人生に意味を見出すこと：自分が何を望んでいるのかを理解し、自分の人生に意味を見出すことが重要です。目標を設定し、それに向かって取り組むことで、自己成長を促進し、幸福感を増大させることができます。
積極的な考え方をすること：ネガティブな考え方や悲観的な思考は、ストレスを増やし、幸福感を減少させる原因となります。ポジティブな考え方や感謝の気持ちを持つことで、ストレスを軽減し、幸福感を高めることができます。
これらの要素は、人生を幸せに生きるために重要なものです。幸せに生きるためには、自分自身を大切にし、人間関係を大切にし、健康的なライフスタイルを送り、自分の人生に意味を見出し、積極的な考え方を持つことが必要です。</description></item><item><title>Human_evolution</title><link>https://solareenlo.com/posts/human_evolution/</link><pubDate>Fri, 17 Mar 2023 10:24:13 +0900</pubDate><guid>https://solareenlo.com/posts/human_evolution/</guid><description> 進化生物学的に人類はいつ滅亡しますか？ # 進化生物学の観点から言えることは、生物種が滅びるかどうかは、その種の適応力や環境への適応能力によって異なります。人類にとっても同様であり、今後の環境変化や人類自身の行動によって、生き残るか滅びるかが決まると考えられます。 現在の人類は、地球上の環境に対して大きな影響を与えており、温暖化や生態系の変化など、多くの問題に直面しています。しかし、人類は過去にも多くの環境変化に対応し、生き残ってきました。 また、技術や科学の進歩によって、人類は病気や災害などの脅威に対処する能力も高まっています。これらのことから、人類がいつ滅びるかを予測することは困難であり、科学的な根拠がないため断定的な回答はできません。 ただし、人類が長期的に生き残るためには、持続可能な社会や環境の構築が必要であり、個々人が持続可能な生活を心がけることが重要です。</description></item><item><title>42Tokyo の Piscine を受けてきました．</title><link>https://solareenlo.com/posts/42tokyo/</link><pubDate>Sun, 15 Mar 2020 02:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/42tokyo/</guid><description> 感想 # とても勉強になり，とても楽しかった26日間でした．</description></item><item><title>フィンテックエンジニア養成勉強会#2</title><link>https://solareenlo.com/posts/fintech001/</link><pubDate>Thu, 17 Oct 2019 19:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/fintech001/</guid><description> フィンテックエンジニア養成勉強会#2（共催:Fintech協会）
キャッシュフリー経済で社会は再編成できるのか？ # スマホ決済の次は触れない生体認証 コアアプリに集約される フィンテックでは型付けが絶対必要 サービス間のデータの受け渡しもスキームを固定する フィンテックスタートアップ起業家としての心構え # ユーザー体験を提供する アメリカではフィンテック＝ブロックチェーンの活用 テクノロジーで新しい市場を生み出さなければ，巨大な事業に成長させられない 2019年現在はブロックチェーンはインフラになっていない テクノロジーファーストだけでは市場に受け入れられない テクノロジーだけがソリューションではない お客様と社会が求めているのを提供する Web系は自由、金融系はお硬い 規則自体を変える手もある 20代30代のキャリアに働きかける ピボットでずらす軸とずらさない軸は何をしたいかで決める 前の技術と同じ部分と変えた部分</description></item><item><title>2020年のブロックチェーン業界を考える</title><link>https://solareenlo.com/posts/think-about-2020-blockchain-industry/</link><pubDate>Wed, 16 Oct 2019 19:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/think-about-2020-blockchain-industry/</guid><description> 2020年のブロックチェーン業界を考える
ビットコインは地道なスケーリングを行っている スクリプトレススクリプトはスクリプトで行っていることを署名に入れる マルチレイヤーで開発していく ビットコインはとても強固 JPモルガン，Libra，中国政府発行のコインはそれぞれ目的が違う JPモルガンは為替ネットワーク Libraはバスケット通貨 中国政府は金融政策</description></item><item><title>【2周年記念】LAPRAS HR Meetup 感謝祭</title><link>https://solareenlo.com/posts/lapras-meetup001/</link><pubDate>Fri, 11 Oct 2019 19:30:00 +0900</pubDate><guid>https://solareenlo.com/posts/lapras-meetup001/</guid><description> 【2周年記念】LAPRAS HR Meetup 感謝祭
イベントは根気強く続けるとスケールする はじめは人来ません メートアップは最初に飲み食いすると良い 飲み食いして変える人も少なからずいらっしゃいますが １つのテーマに絞ってその知見をひたすら押すとそれに興味がある強い人が集まる サイバーテックさんはスカラーをひたすら押したら良い人材が来てくださった リファラル資源のネットワークを拡げる トレジャーデータのエンジニアはめっちゃ優秀 スカウトメール送る前にGitHub・Twitterでいいねボタンを押す カジュアル面談では， 最初の合意形成が大切 Hard to getがとても重要 下調べをもう一歩先に進める その時のカジュアル面談のゴールをきちんと決めておく</description></item><item><title>Oracle Blockchain GIG#5</title><link>https://solareenlo.com/posts/blockchaingig005/</link><pubDate>Thu, 10 Oct 2019 18:30:00 +0900</pubDate><guid>https://solareenlo.com/posts/blockchaingig005/</guid><description> Blockchain GIG #5
ハッシュタグは#blockchaingig Oracleさん # ユースケース # 食品のトレーサビリティ 貿易系 人事情報・学歴情報 サプライチェーンが多い コバルトのトレーサビリティ 医療情報の共有 サプライヤーの共有 GEのインターカンパニーの売掛・買掛をブロックチェーンで管理しよう インテグレーション・見える化・ データーの連携レイヤーをブロックチェーンで使った 6週間で作れた ベスプラ # チャネルとはサブネットワークに分けるもの ChannelとPeerの関係 Transient Data 台帳に含まれないようにChaincodeに引き渡せるデータ Pravate Data Collection プライベートデータを持つノードを事前に決めておく必要がある 暗号化 鍵交換問題 Transient Dataを使って共通鍵を引き渡す 暗号化アルゴリズムは稀代化する 誰をどの程度信頼するか デフォルトではPeerにアクセスできれば台帳が読める Peerも結局のところOS上のプロセスの一つなので、ホストマシンをキチンとセキュアにする アプリケーションとスマコン スマコンをチェインコードという 台帳に全てを書こうとしない ワークフローはアプリケーションで行う １企業内でのワークフローはアプリケーションで行う スマコンは必ず決定論的にする ワールドステートの現在状態と引数のみに依存するようにする PushではなくてPullでスマコンを行うようにする パフォーマンス ネットワーク構成 Channelの構成 プライバシーの構成に応じてChannelを分ける Peerの構成 World Stateへのアクセス アクセスするデータの最小化 Read/WriteされるKeyを出来る限り最小にする 大規模クエリや分析などはオンチェーンでの処理には向かない SQL Rich クエリは使えない Oracle DB 20c 行をハッシュ値で繋いだTableです 富士通さん # ミッション # ブロックチェーンをSEが使いやすい状態に仕立てて提供・運用すること PaaS化して自動運用 短期開発のため、システム/アプリケーションの開発に密に関わる SEが躓くHyperledger Fabricの壁 # 複数のPeerにリクエストする必要がある スマコン(チェーンコード)の開発 データとストアとしてStateDB(KVS)を持つアプリケーションのようなもの 基本的には案件ごとに開発する必要がある どこまで考慮するば良いかの線引きが難しい SEが躓かないための解決策 # 使用性向上機能を設ける RESTサーバーを設ける ユースケース別チェーンコードを設ける トラブル事例１(不自然な画面遷移) # スタンプラリーPoCのアプリ開発における事例 アプリからトランザクションが複数投げられてた 原因 # クーポン・スタンプに対する認識の違い 来店前に用意するもの・来店後に用意するもの 対策 # １度のコールでメソッドを複数実行できるメソッドを追加した(バルク実行) 一度にバルク実行するメソッド群に依存会計が無いことが前提 アプリ側で吸収する 処理をまとめる発想を捨てて、違和感のない箇所に分散させる 違和感を消すために、同期・非同期で処理させる テスト工程でエラーが発生する # 遅いPeerでエラーが発生する ノードの配置はAnti-Affinityポリジーを守ってた Anti-Affinityポリシーとは可用性のためにノードを物理的に分散化させること 原因 # 遅いPeerのトランザクションより先に速いPeerのトランザクションが処理さえる 解決策 # 遅いPeerのために待ってあげる RFTの時にお客様から # トランザクション・チェーンコード・ステート・ブロックを事前に説明する 開発リードタイム短縮も大事ですが # 構想通りのブロックチェーンシステムが出来たか評価する No Block, No Life LayerXさん # DApps開発特有のハマりポイントご紹介 # アプリ開発の1つのコンポーネントとして使う アジェンダ # DAppsのアーキテクチャ全体像 Indexer イベント駆動のトランザクション実行 コントラクトデプロイのフロー UX DAppsのアーキテクチャ全体像 # サーバーが必要 MetaMask Indexerが必要 コントラクト上にあるデータをDBなどにキャッシュする 二重実行されてないことを確認する indexing済みの次のブロックからログを取得する 取得したイベントのログの数だけループする Quorum-indexer-DBの流れにする DB-APIにする Quorum, indexer, API, DB, App イベント駆動のトランザクション実行(ignitor) # トランザクションのイベント発火を起点として別のトランザクションを実行する トリガー専用のイベントを用意する 失敗専用のイベントを発火する。失敗をrevertとするのではなくて。 ignitorとindexerとの協調 # ignitorとindexerを完全に独立させることはできない indexerは1ブロックに含まれるイベントをatomicにDBに保存しているので、 コントラクのデプロイフロー # トランザクション実行中の状態をどうするか？ # 途中のAPIで表示処理する ディスカッション # 現実での紐付け問題はどうするか？ # ブロックチェーンがはまるところは # 需要と供給が公開される市場</description></item><item><title>自動車安全運転5則</title><link>https://solareenlo.com/posts/safe-drive/</link><pubDate>Thu, 10 Oct 2019 15:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/safe-drive/</guid><description> 安全速度を必ず守る カーブの手前でスピードを落とす 交差点では必ず安全を確かめる 一時停止で横断歩道の安全を守る 飲酒運転を絶対にしない 自転車安全利用5則 # 自転車は，車道が原則，歩道は例外． 車道は左側を通行する 歩道は歩行者優先で，車道よりは徐行する． 安全ルールを守る． 子どもはヘルメットを着用する．</description></item><item><title>しまや出版さんの工場見学に参加してきました．</title><link>https://solareenlo.com/posts/shimaya/</link><pubDate>Sun, 29 Sep 2019 15:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/shimaya/</guid><description>はじめに # 私は 技術書典7に初めて本を出す側として参加させて頂いた同人誌初心者です．
そんな中，本の中身を充実させることに集中し過ぎて，本の外側には全く注意を向けることなく終わってしまいました．
そこで，製本・印刷についても勉強してみようと思い， 技術書同人誌博覧会さん主催の，株式会社しまや出版さんの 印刷所見学ツアー（午前の部）に参加させて頂きました．
しまや出版さんとは？ # 東京都足立区にある同人誌を専門とする出版屋さん． 東京でベスト3に入る歴史を持つ自費出版印刷所(昭和43年印刷業を開始)． 行政から優れた技術力を持つと認められた唯一の同人誌出版社(足立ブランド)． しまや出版さんの良いところ # 技術 # オンデマンド印刷の機械が最上級品． 故にオフセット印刷と遜色が無いくらいオンデマンド印刷の本もきれい． 素人が見るとほとんどわからない． 新しい印刷技術に積極的に取り組んでいる． 様々なデザインパターンが可能． 紙・インク・トナー・型抜き・リング・PPなどの種類豊富． 人の手が随所に加わっているので，いろいろとカスタマイズが可能． 人 # 皆さん職人気質． 無理なカスタマイズも「一度試してみます！」と一度試してからキチンと回答して下さる． カスタマイズの相談に真摯に対応して下さる． 受付のお姉さんとても親切． 従業員の方々を大切にしているホワイト企業． 従業員の方々きちんと挨拶して下さる． 環境保護 # 環境に優しい印刷・製本を行っている． 環境保護印刷マークのゴールドを取得． 環境負荷の大きいインク洗浄剤を使わないようにしている(その分人が頑張っている)． その他 # こういった見学会を一般で受けて下さるほど技術力に自信があるし，書き手を大切にしている． 社員猫さんかわいい． しまや出版さんの欠点 # 締切が早い． 日曜日に即売会があるなら火曜日が締切日． ホワイトな仕事環境とのトレードオフ． おわりに # しまや出版さんの工場見学に参加できて本当に勉強になりました． 想像の30倍位製本・印刷にこだわることが出来てびっくりしました． 次は，箔押し・マットPP・表紙・帯・表紙のデザインに凝ってみようと思います． 技術書同人誌博覧会さん・株式会社しまや出版さん，今回はこのような貴重な機会を設けて下さり，本当にありがとうございました．</description></item><item><title>睡眠の機能</title><link>https://solareenlo.com/posts/sleep/</link><pubDate>Tue, 30 Jul 2019 03:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/sleep/</guid><description> あらゆる抽象度におけるホメオスタシス(恒常性維持機能)で必要な機能 脳機能システム シナプスの可塑性(発達, 修理, 記憶の形成)を維持するために睡眠が必要 細胞免疫システム 睡眠が免疫機能維持に重要 寝不足は風邪をひいたり, 感染症になりやすい. メタボリックシステム 寝不足はインシュリン作用が下がり, 高血圧になりやすい.</description></item><item><title>5Gの概要</title><link>https://solareenlo.com/posts/5g-overview/</link><pubDate>Tue, 09 Jul 2019 13:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/5g-overview/</guid><description> 5Gとは次世代の通信規格ではなく基盤技術 # 高速通信 4GLTEの10〜100倍 2時間の4Kハイビジョン動画を3秒でダウンロード 低遅延 1/1000秒以下の低遅延 自動運転にリアルタイム対応 多数間通信 1km^2あたり100万台以上同時接続 1部屋で約100台以上接続可能でIoT対応 クラウド対応 5Gコアシステムがクラウドに最初から対応 並列人工知能前提 4Gまでのハードインフラと違いソフトウェアベースで人工知能対応 高速通信・低遅延・多数間通信などの処理を人工知能が行う 障害に対する高耐性 障害やサイバー攻撃に対応する高いレジリエンス</description></item><item><title>技術書典ミートアップ</title><link>https://solareenlo.com/posts/techbook-meetup/</link><pubDate>Fri, 28 Jun 2019 18:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/techbook-meetup/</guid><description>用語説明 # 同人誌・・・自家製の本のこと 同人誌とは、同じ思考を持った人たちで作る本の一種である. 個人や仲間と一緒に作り上げる本のこと. えっちなのではないよ. 即売会・・・同人誌を頒布したりすること 頒布・・・ 同人誌を売って布教すること サークル・・・本を頒布する側 利益を上げるのが第一目的ではない. 普及するのが目的. お客さん・・・本を購入する側 なぜ作るのか？ # 楽しいから 知らないことを気軽に知ることができて楽しい. 同好の士を増やすぞ！ 体験を共有したい！（成功・失敗を問わず, 俺屍） どうやって作るのか？ # 印刷所に頼む 日光企画さんかねこのしっぽさん コピー機で頑張って作る sevenelevenさんのコピー機で一応作れる 電子書籍 QRコードで頒布する 紙の本がとても人気があります. 紙の本が売り切れたら電子書籍を売るパターンが多いそうです. 使うツールは？ # Re:VIEWがオススメ. GitHubで差分を見やすく, mergeしやすい形式がオススメです. markdownよりもRe:VIEWを使うのが便利. md2review（markdown &amp;gt; Re:VIEW） 本が間に合わなかったら？ # 本がなくてブースに座るのは辛い思いをします. 6割でも出しましょう. 無断欠席は次回以降出禁になります. 必要な経費 # 一般(参加費7,000円)とパトロン(参加費20,000円)の抽選確率の違いはない. パトロンは名誉職. 日光企画さんと猫の尻尾さんが公式の印刷会社さん 当日は印刷物がブースに届きます. 税金の処理 # 経済活動したら税金を払いましょう. 雑所得となります. 年間20万円以上の場合は申告義務があります. 本を作る技術 # イベント申し込み, 印刷手配, 広報活動, 小銭 あの布屋で備品を購入する. テーブルの上にかける布です. アドバイス # 無理に誰かと組む必要はない. 1人で店番は無理. 他の人のブースも見たい. トイレ, 昼食もしたい.</description></item><item><title>ドキュメント作成ツール</title><link>https://solareenlo.com/posts/documentation/</link><pubDate>Mon, 17 Jun 2019 06:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/documentation/</guid><description> https://readthedocs.org https://www.sphinx-doc.org/en/master/ https://www.mkdocs.org https://github.com/squidfunk/mkdocs-material https://www.gitbook.com</description></item><item><title>Tezosハンズオン</title><link>https://solareenlo.com/posts/tezos-hands-on/</link><pubDate>Sat, 15 Jun 2019 13:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/tezos-hands-on/</guid><description>Tezosとは # 第3世代のブロックチェーン 2018-09: Mainnet開始 ペーパーで約束されたものをほぼ実装した. 財団がRandDにお金を出してる. PoS Tezosの特徴 # プロトコルはステークホルダーの物というのが第一の信条. LPos: Liqid Proof of Stake オンチェーン・ガバナンス: 自己修正投票 安全第一 形式検証を用いている DPoS # Proof-of-Stake # トークン所有量に応じたブロック生成権が与えらえる. ASICが必要ない 手数料が高騰しない 環境に良い トークンを所有していないマイナーからプロトコルをステークホルダーに解放する. Delegated PoS (委任PoS) # ステーク投票により選ばれた少数のノードにブロック生成権を与える. 権利を投票に使う. EOSが代表格 利点 PC持ってないステークホルダーも間接的にブロック生成に参加できる. ノード数を減らすことで合意形成効率を上げられる. 欠点 過度にノード数を減らすと分散性・安全性を損なう. Liquid PoS (Tezos) # 選ばれた少数のノードではなく, 誰でもベーキング(ブロック生成)できる. マーケティングにより, マイニングとは言わずにベーキングと言う. ベーカリー(ベーキングの委任を受ける業者のこと), ベーキング権(マイニングする権利), ベーキング(マイニングのこと)という. マイニングを少数ノードに牛耳られることなくステークホルダーに還元するためにLPoSを採用している. 現在450〜500くらいのノードがある. スピードは狙ってない. 現在は30〜40TPSくらい. Liquid Democracy (PoSとDPoSの間の概念) # 直接民主制(PoS)から代表民主制(DPos)へ. Liquid Democracy(LPoS)は直接民主制と代表民主制の中間の概念. Liquid Democracy(LPoS)は議題ごとに代議員を選ぶことができる. TezosはLiquid Democracy(LPoS)を採用している. オンチェーンガバナンス # ガバナンスとは # どうやって改良(フォーク)していくかの手続きのこと.</description></item><item><title>BiiLabs Meet up</title><link>https://solareenlo.com/posts/biilabs-meetup/</link><pubDate>Thu, 06 Jun 2019 18:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/biilabs-meetup/</guid><description> BiiLabsのミートアップ # IOTAに関する目新しいことは特になし. BiiLabsさんのミートアップだった. IoTにDLTを応用してこんなこと出来ます. 便利なAPIを公開しております.</description></item><item><title>DockerでAngularを動かす</title><link>https://solareenlo.com/posts/angular-docker/</link><pubDate>Mon, 06 May 2019 10:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/angular-docker/</guid><description>以下を参照のこと.
solareenlo/angular-cli</description></item><item><title>とっても使えるアプリたち</title><link>https://solareenlo.com/posts/app/</link><pubDate>Tue, 30 Apr 2019 10:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/app/</guid><description> 本を作成 # Re:VIEW pandoc 質疑応答 # sli.do 作図 # draw.io マークダウン表示 # typora wikiの新しい形 # Scrapbox ノートアプリ # Notion サーバーレスアプリのホスティングサービス # Now JSONの書きミスチェッカー # JOSNLint 全文検索 # Elasticsearch モニタリング # KIBANA Grafana Prometheus</description></item><item><title>ローカル環境のDocker Hubのパスワードをpassで管理する方法</title><link>https://solareenlo.com/posts/docker-pass/</link><pubDate>Tue, 23 Apr 2019 08:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/docker-pass/</guid><description>Ubuntu用
なぜDocker Hubのパスワードをpassを使って管理するか? ローカルからDocker Hubにログインすると, その時のパスワードを平文のまま保存されるから. ここからdocker-credential-passの最新バージョンをダウンロードする. tar -zxvf docker-credential-pass.tar.gz (解凍する.) mv docker-credential-pass /usr/local/bin (PATHが通ってるところにファイルを移動する.) sudo apt-get install gpg pass ( gpgと passをインストール.) gpg --generate-keyで新しい秘密鍵と公開鍵の組を作る. gpg --list-keysで出てきた, pubの16進数の40文字(大文字のA-F, 0-9の文字列)をコピーする. pass init AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDでpassを初期化する. pass insert docker-credential-helpers/docker-pass-initialized-checkでとりあえずのディレクトリを作成する. docker-credential-pass listで{}と返ってくる. ~/.docker/config.jsonに{&amp;quot;credsStore&amp;quot;: &amp;quot;pass&amp;quot;}と書き込む. docker loginでDockerにログインする. うまくいかないときは権限をchmodを使って変更してみる.
curl -O https://github.com/docker/docker-credential-helpers/releases/download/v0.6.0/docker-credential-pass-v0.6.0-amd64.tar.gz tar -xvf docker-credential-pass.tar.gz mv docker-credential-pass /usr/local/bin apt-get install gpg pass gpg --generate-key gpg --list-keys &amp;gt; pub rsa2048 2019-04-22 [SC] [有効期限: 2021-04-21] &amp;gt; D7D35B60A7FA571541959AF3C4821C32793D5F5A // ここの公開鍵をコピーする &amp;gt; uid [ 究極 ] solareenlo &amp;lt;test@example.</description></item><item><title>Programming BitcoinをHTMLで読んでみる</title><link>https://solareenlo.com/posts/programming-bitcoin/</link><pubDate>Sun, 21 Apr 2019 08:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/programming-bitcoin/</guid><description> 前提条件 # RubyがPCにインストールされている. RubyのパッケージマネージャーのgemがPCにインストールされている. HTML作成 # git clone git@github.com:jimmysong/programmingbitcoin.git cd programmingbitcoin gem install asciidoctor find . -name \*.asciidoc -print0 | xargs -0 -n1 asciidoctor これで.asciidocが.htmlに変換されて出力されるので, 任意のブラウザで開いて読む.
References # 「Programming Bitcoin」を読んだ jimmysong/programmingbitcoin 脱Word、脱Markdown、asciidocでドキュメント作成する際のアレコレ</description></item><item><title>bitbank Drink Meetup #1 〜エンジニア〜</title><link>https://solareenlo.com/posts/bitbank01/</link><pubDate>Fri, 19 Apr 2019 08:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/bitbank01/</guid><description> bitbank Drink Meetup #1 〜エンジニア〜の自分なりのメモ
秘密鍵の安全な生成法 # 用意するもの
電磁波を通さない物質で囲まれたシェルター 電波が通じてない山奥 完全にランダムで賽の目が出るサイコロ 上記のセットを複数個 とってもセキュアに暗号資産を管理してくれるところ # xapo</description></item><item><title>Plasma × Substrate 勉強会 #1</title><link>https://solareenlo.com/posts/plasma-substrate01/</link><pubDate>Thu, 18 Apr 2019 08:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/plasma-substrate01/</guid><description>Plasma × Substrate 勉強会 #1の自分なりのメモ
Introducing Plasma Chamber # プラズマとは # セキュアにトランザクションをさばく. マークル木を使ってデータを圧縮する. 1分ごとに行う. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 他の人にチャレンジされなければ許可されて出金される仕組み. スケーラブル・セキュリティ・ユーザビリの高いDappasが作れるぞ. プラズマの悪い点 # 受取手はトランザクションの履歴を確認しないといけない. ファイナリティは待たないといけない. Exit期間があるのでUIが悪い Plasma Chamberは上記の3つの悪い点を改善するぞ # What I mean by &amp;lsquo;usable&amp;rsquo; # High TPS, Less Gas, Work on Mobile, Instant Finality, ERC20使える
特徴 # Exit Game Operatorが資金をかっさらう事がある. それに対する対策を行った. Gas Const/Proof Size Reduction Instantaneous Finality Fast Finality Contract に供託しておく. ユーザー, マーチャント, オペレーター, Ethereum オペレーターまではhttpsで通信する. オペレーターまでなら2秒以下でファイナリティが得られる. Ethereumのブロックチェーンまで待つと2.5分から7分かかる. Plasma MVP → Plasma Cash → Plasma Cashflow → ?</description></item><item><title>bitcoindへのアクセス方法</title><link>https://solareenlo.com/posts/bitcoind/</link><pubDate>Wed, 17 Apr 2019 09:00:00 +0900</pubDate><guid>https://solareenlo.com/posts/bitcoind/</guid><description> bitcoindへのアクセス方法3選(bitcoin-cli, curl, POST). 3つとも JSON-RPCで通信してる.
bitcoindとは, 名前の通りunixのデーモンとして動作する事を目的とするBitcoinのクライアントで, JSON-RPCで開発者向けのAPIを提供する. したがって, Webサービスとして動作するBitcoinウォレットのバックエンドとしてや, マイニングプールのサーバーとして使われる.
Reference: Bitcoinウォレットの比較
1. bitcoin-cliを使ってアクセスする. # bitcoin-cliとは, bitcoindへJSON-RPCを使ってアクセスするツールのこと.
bitcoindを使ってBitcoinのフルノードを立ち上げて,
bitcoin-cli getblockchaininfo とか.
2. cURLを使ってアクセスする. # 下記curlを行う要件.
ネットワーク: mainnet 接続環境: ローカル ポート番号: 8332 ユーザーの名前: user-name パスワード: user-password 投げつけているbitcoin-cliのメソッド: getblockchaininfo curl --data-binary &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;1.0&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;curltext&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;getblockchaininfo&amp;#34;,&amp;#34;params&amp;#34;:[]}&amp;#39; -H &amp;#39;content-type:text/plain;&amp;#39; http://user-name:user-password@127.0.0.1:8332/ | jq 3. 自作プログラムでPOSTしてアクセスする. # bitcoindはHTTPリクエストメソッドのPOSTに対応しているので, JSON-RPCをPOSTで投げつける. 以下のプログラムはNode.jsを使った例.
https://github.com/solareenlo/bc-json-rpc</description></item><item><title>このサイトの作り方</title><link>https://solareenlo.com/posts/how-to-make-this-site/</link><pubDate>Tue, 16 Apr 2019 06:49:32 +0900</pubDate><guid>https://solareenlo.com/posts/how-to-make-this-site/</guid><description>Macユーザー用
ものすごい初歩からこのサイトの作り方を説明しています. この手順で作成するとGitHubに全ての内容/更新履歴/更新内容が公開されますので, 適宜読み替えてください.
Macにgitをインストールする # https://git-scm.com/download/mac
GitHubにアカウントを作成する # https://github.com
MacにHomebrewをインストールする # /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; References: https://brew.sh/index_ja.html https://github.com/Homebrew/brew MacにHugo(静的サイトジェネレーター)をインストールする # brew install hugo Reference: Install Hugo HugoのExtendedバージョンをインストールする # 以下内容をhugo_latest.sh名で保存する.
# hugo_latest.sh # Find the latest Hugo from GitHub echo &amp;#39;🐹 Starting Hugo Install / Update 🐹&amp;#39; echo &amp;#39; Note: Please be sure to have curl and grep installed&amp;#39; echo &amp;#39;&amp;#39; url=$(curl -s &amp;#34;https://api.github.com/repositories/11180687/releases/latest&amp;#34; | grep -o &amp;#39;https://.*hugo_extended.*_macOS-64bit.tar.gz&amp;#39;) echo &amp;#39;✅ Found latest version&amp;#39; curl -s $url -L -o hugo_latest.</description></item><item><title>Hello World!</title><link>https://solareenlo.com/posts/hello-world/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://solareenlo.com/posts/hello-world/</guid><description>Hello World!</description></item></channel></rss>