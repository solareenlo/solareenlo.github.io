<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on solareenlo</title>
    <link>https://solareenlo.com/posts/</link>
    <description>Recent content in Posts on solareenlo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Apr 2019 08:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://solareenlo.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ローカル環境のDocker Hubのパスワードをpassで管理する方法</title>
      <link>https://solareenlo.com/posts/docker-pass/</link>
      <pubDate>Tue, 23 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/docker-pass/</guid>
      <description>Ubuntu用
 なぜDocker Hubのパスワードをpassを使って管理するか? ローカルからDocker Hubにログインすると, その時のパスワードを平文のまま保存されるから.    ここからdocker-credential-passの最新バージョンをダウンロードする. tar -xvf docker-credential-pass.tar.gz (解凍する.) mv docker-credential-pass /usr/local/bin (PATHが通ってるところにファイルを移動する) apt-get install gpg pass (gpgとpassをインストール.) gpg --generate-keyで新しい秘密鍵と公開鍵の組を作る. gpg --list-keysで出てきた, pubの16進数の40文字(大文字のA-F, 0-9の文字列)をコピーする. pass init AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDでpassを初期化する. pass insert docker-credential-helpers/docker-pass-initialized-checkでとりあえずのディレクトリを作成する. docker-credential-pass listで ~/.docker/config.jsonに{&amp;quot;credsStore&amp;quot;: &amp;quot;pass&amp;quot;}と書き込む. docker loginでDockerにログインする.   うまくいかないときは権限をchmodを使って変更してみる.
 curl -O https://github.com/docker/docker-credential-helpers/releases/download/v0.6.0/docker-credential-pass-v0.6.0-amd64.tar.gz tar -xvf docker-credential-pass.tar.gz mv docker-credential-pass /usr/local/bin apt-get install gpg pass gpg --generate-key gpg --list-keys &amp;gt; pub rsa2048 2019-04-22 [SC] [有効期限: 2021-04-21] &amp;gt; D7D35B60A7FA571541959AF3C4821C32793D5F5A // ここの公開鍵をコピーする &amp;gt; uid [ 究極 ] solareenlo &amp;lt;test@example.</description>
    </item>
    
    <item>
      <title>Programming BitcoinをHTMLで読んでみる</title>
      <link>https://solareenlo.com/posts/programming-bitcoin/</link>
      <pubDate>Sun, 21 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/programming-bitcoin/</guid>
      <description> 前提条件  RubyがPCにインストールされている. RubyのパッケージマネージャーのgemがPCにインストールされている.  HTML作成 git clone git@github.com:jimmysong/programmingbitcoin.git cd programmingbitcoin gem install asciidoctor find . -name \*.asciidoc -print0 | xargs -0 -n1 asciidoctor これで.asciidocが.htmlに変換されて出力されるので, 任意のブラウザで開いて読む.
References  「Programming Bitcoin」を読んだ jimmysong/programmingbitcoin 脱Word、脱Markdown、asciidocでドキュメント作成する際のアレコレ  </description>
    </item>
    
    <item>
      <title>bitbank Drink Meetup #1 〜エンジニア〜</title>
      <link>https://solareenlo.com/posts/bitbank01/</link>
      <pubDate>Fri, 19 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/bitbank01/</guid>
      <description>  bitbank Drink Meetup #1 〜エンジニア〜の自分なりのメモ
 秘密鍵の安全な生成法 用意するもの
 電磁波を通さない物質で囲まれたシェルター 電波が通じてない山奥 完全にランダムで賽の目が出るサイコロ 上記のセットを複数個  とってもセキュアに暗号資産を管理してくれるところ  xapo  </description>
    </item>
    
    <item>
      <title>Plasma × Substrate 勉強会 #1</title>
      <link>https://solareenlo.com/posts/plasma-substrate01/</link>
      <pubDate>Thu, 18 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/plasma-substrate01/</guid>
      <description>Plasma × Substrate 勉強会 #1の自分なりのメモ
 Introducing Plasma Chamber プラズマとは  セキュアにトランザクションをさばく. マークル木を使ってデータを圧縮する. 1分ごとに行う. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 他の人にチャレンジされなければ許可されて出金される仕組み. スケーラブル・セキュリティ・ユーザビリの高いDappasが作れるぞ.  プラズマの悪い点  受取手はトランザクションの履歴を確認しないといけない. ファイナリティは待たないといけない. Exit期間があるのでUIが悪い  Plasma Chamberは上記の3つの悪い点を改善するぞ What I mean by &amp;lsquo;usable&amp;rsquo; High TPS, Less Gas, Work on Mobile, Instant Finality, ERC20使える
特徴  Exit Game Operatorが資金をかっさらう事がある. それに対する対策を行った. Gas Const/Proof Size Reduction Instantaneous Finality Fast Finality Contract に供託しておく. ユーザー, マーチャント, オペレーター, Ethereum オペレーターまではhttpsで通信する. オペレーターまでなら2秒以下でファイナリティが得られる. Ethereumのブロックチェーンまで待つと2.5分から7分かかる. Plasma MVP → Plasma Cash → Plasma Cashflow → ?</description>
    </item>
    
    <item>
      <title>bitcoindへのアクセス方法</title>
      <link>https://solareenlo.com/posts/bitcoind/</link>
      <pubDate>Wed, 17 Apr 2019 09:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/bitcoind/</guid>
      <description> bitcoindへのアクセス方法3選(bitcoin-cli, curl, POST). 3つともJSON-RPCで通信してる.
 bitcoindとは, 名前の通りunixのデーモンとして動作する事を目的とするBitcoinのクライアントで, JSON-RPCで開発者向けのAPIを提供する. したがって, Webサービスとして動作するBitcoinウォレットのバックエンドとしてや, マイニングプールのサーバーとして使われる.
Reference: Bitcoinウォレットの比較
 1. bitcoin-cliを使ってアクセスする.  bitcoin-cliとは, bitcoindへJSON-RPCを使ってアクセスするツールのこと.
 bitcoindを使ってBitcoinのフルノードを立ち上げて,
bitcoin-cli getblockchaininfo  とか.
2. cURLを使ってアクセスする. 下記curlを行う要件.
 ネットワーク: mainnet 接続環境: ローカル ポート番号: 8332 ユーザーの名前: user-name パスワード: user-password 投げつけているbitcoin-cliのメソッド: getblockchaininfo  curl --data-binary &#39;{&amp;quot;jsonrpc&amp;quot;:&amp;quot;1.0&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;curltext&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;getblockchaininfo&amp;quot;,&amp;quot;params&amp;quot;:[]}&#39; -H &#39;content-type:text/plain;&#39; http://user-name:user-password@127.0.0.1:8332/ | jq  3. 自作プログラムでPOSTしてアクセスする. bitcoindはHTTPリクエストメソッドのPOSTに対応しているので, JSON-RPCをPOSTで投げつける. 以下のプログラムはNode.jsを使った例.
 https://github.com/solareenlo/bc-json-rpc  </description>
    </item>
    
    <item>
      <title>このサイトの作り方</title>
      <link>https://solareenlo.com/posts/how-to-make-this-site/</link>
      <pubDate>Tue, 16 Apr 2019 06:49:32 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/how-to-make-this-site/</guid>
      <description>Macユーザー用
ものすごい初歩からこのサイトの作り方を説明しています. この手順で作成するとGitHubに全ての内容/更新履歴/更新内容が公開されますので, 適宜読み替えてください.
Macにgitをインストールする https://git-scm.com/download/mac
GitHubにアカウントを作成する https://github.com
MacにHomebrewをインストールする /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;   References:  https://brew.sh/index_ja.html https://github.com/Homebrew/brew   MacにHugo(静的サイトジェネレーター)をインストールする brew install hugo  Reference: Install Hugo  HugoのExtendedバージョンをインストールする 以下内容をhugo_latest.sh名で保存する.
# hugo_latest.sh # Find the latest Hugo from GitHub echo &#39;🐹 Starting Hugo Install / Update 🐹&#39; echo &#39; Note: Please be sure to have curl and grep installed&#39; echo &#39;&#39; url=$(curl -s &amp;quot;https://api.github.com/repositories/11180687/releases/latest&amp;quot; | grep -o &#39;https://.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://solareenlo.com/posts/hello-world/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/posts/hello-world/</guid>
      <description>Hello World!</description>
    </item>
    
  </channel>
</rss>