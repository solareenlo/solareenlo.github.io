<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>はじめに on solareenlo</title>
    <link>https://solareenlo.com/</link>
    <description>Recent content in はじめに on solareenlo</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://solareenlo.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DockerでAngularを動かす</title>
      <link>https://solareenlo.com/posts/angular-docker/</link>
      <pubDate>Mon, 06 May 2019 10:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/angular-docker/</guid>
      <description>以下を参照のこと.
solareenlo/angular-cli</description>
    </item>
    
    <item>
      <title>とっても使えるアプリたち</title>
      <link>https://solareenlo.com/posts/app/</link>
      <pubDate>Tue, 30 Apr 2019 10:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/app/</guid>
      <description> 質疑応答  sli.do  作図  draw.io  マークダウン表示  typora  wikiの新しい形  Scrapbox  ノートアプリ  Notion  サーバーレスアプリのホスティングサービス  Now  JSONの書きミスチェッカー  JOSNLint  全文検索  Elasticsearch  モニタリング  KIBANA Grafana Prometheus  </description>
    </item>
    
    <item>
      <title>ローカル環境のDocker Hubのパスワードをpassで管理する方法</title>
      <link>https://solareenlo.com/posts/docker-pass/</link>
      <pubDate>Tue, 23 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/docker-pass/</guid>
      <description>Ubuntu用
 なぜDocker Hubのパスワードをpassを使って管理するか? ローカルからDocker Hubにログインすると, その時のパスワードを平文のまま保存されるから.    ここからdocker-credential-passの最新バージョンをダウンロードする. tar -zxvf docker-credential-pass.tar.gz (解凍する.) mv docker-credential-pass /usr/local/bin (PATHが通ってるところにファイルを移動する.) sudo apt-get install gpg pass (gpgとpassをインストール.) gpg --generate-keyで新しい秘密鍵と公開鍵の組を作る. gpg --list-keysで出てきた, pubの16進数の40文字(大文字のA-F, 0-9の文字列)をコピーする. pass init AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDでpassを初期化する. pass insert docker-credential-helpers/docker-pass-initialized-checkでとりあえずのディレクトリを作成する. docker-credential-pass listで{}と返ってくる. ~/.docker/config.jsonに{&amp;quot;credsStore&amp;quot;: &amp;quot;pass&amp;quot;}と書き込む. docker loginでDockerにログインする.   うまくいかないときは権限をchmodを使って変更してみる.
 curl -O https://github.com/docker/docker-credential-helpers/releases/download/v0.6.0/docker-credential-pass-v0.6.0-amd64.tar.gz tar -xvf docker-credential-pass.tar.gz mv docker-credential-pass /usr/local/bin apt-get install gpg pass gpg --generate-key gpg --list-keys &amp;gt; pub rsa2048 2019-04-22 [SC] [有効期限: 2021-04-21] &amp;gt; D7D35B60A7FA571541959AF3C4821C32793D5F5A // ここの公開鍵をコピーする &amp;gt; uid [ 究極 ] solareenlo &amp;lt;test@example.</description>
    </item>
    
    <item>
      <title>Programming BitcoinをHTMLで読んでみる</title>
      <link>https://solareenlo.com/posts/programming-bitcoin/</link>
      <pubDate>Sun, 21 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/programming-bitcoin/</guid>
      <description> 前提条件  RubyがPCにインストールされている. RubyのパッケージマネージャーのgemがPCにインストールされている.  HTML作成 git clone git@github.com:jimmysong/programmingbitcoin.git cd programmingbitcoin gem install asciidoctor find . -name \*.asciidoc -print0 | xargs -0 -n1 asciidoctor これで.asciidocが.htmlに変換されて出力されるので, 任意のブラウザで開いて読む.
References  「Programming Bitcoin」を読んだ jimmysong/programmingbitcoin 脱Word、脱Markdown、asciidocでドキュメント作成する際のアレコレ  </description>
    </item>
    
    <item>
      <title>bitbank Drink Meetup #1 〜エンジニア〜</title>
      <link>https://solareenlo.com/posts/bitbank01/</link>
      <pubDate>Fri, 19 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/bitbank01/</guid>
      <description>  bitbank Drink Meetup #1 〜エンジニア〜の自分なりのメモ
 秘密鍵の安全な生成法 用意するもの
 電磁波を通さない物質で囲まれたシェルター 電波が通じてない山奥 完全にランダムで賽の目が出るサイコロ 上記のセットを複数個  とってもセキュアに暗号資産を管理してくれるところ  xapo  </description>
    </item>
    
    <item>
      <title>Plasma × Substrate 勉強会 #1</title>
      <link>https://solareenlo.com/posts/plasma-substrate01/</link>
      <pubDate>Thu, 18 Apr 2019 08:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/plasma-substrate01/</guid>
      <description>Plasma × Substrate 勉強会 #1の自分なりのメモ
 Introducing Plasma Chamber プラズマとは  セキュアにトランザクションをさばく. マークル木を使ってデータを圧縮する. 1分ごとに行う. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 他の人にチャレンジされなければ許可されて出金される仕組み. スケーラブル・セキュリティ・ユーザビリの高いDappasが作れるぞ.  プラズマの悪い点  受取手はトランザクションの履歴を確認しないといけない. ファイナリティは待たないといけない. Exit期間があるのでUIが悪い  Plasma Chamberは上記の3つの悪い点を改善するぞ What I mean by &amp;lsquo;usable&amp;rsquo; High TPS, Less Gas, Work on Mobile, Instant Finality, ERC20使える
特徴  Exit Game Operatorが資金をかっさらう事がある. それに対する対策を行った. Gas Const/Proof Size Reduction Instantaneous Finality Fast Finality Contract に供託しておく. ユーザー, マーチャント, オペレーター, Ethereum オペレーターまではhttpsで通信する. オペレーターまでなら2秒以下でファイナリティが得られる. Ethereumのブロックチェーンまで待つと2.5分から7分かかる. Plasma MVP → Plasma Cash → Plasma Cashflow → ?</description>
    </item>
    
    <item>
      <title>bitcoindへのアクセス方法</title>
      <link>https://solareenlo.com/posts/bitcoind/</link>
      <pubDate>Wed, 17 Apr 2019 09:00:00 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/bitcoind/</guid>
      <description> bitcoindへのアクセス方法3選(bitcoin-cli, curl, POST). 3つともJSON-RPCで通信してる.
 bitcoindとは, 名前の通りunixのデーモンとして動作する事を目的とするBitcoinのクライアントで, JSON-RPCで開発者向けのAPIを提供する. したがって, Webサービスとして動作するBitcoinウォレットのバックエンドとしてや, マイニングプールのサーバーとして使われる.
Reference: Bitcoinウォレットの比較
 1. bitcoin-cliを使ってアクセスする.  bitcoin-cliとは, bitcoindへJSON-RPCを使ってアクセスするツールのこと.
 bitcoindを使ってBitcoinのフルノードを立ち上げて,
bitcoin-cli getblockchaininfo  とか.
2. cURLを使ってアクセスする. 下記curlを行う要件.
 ネットワーク: mainnet 接続環境: ローカル ポート番号: 8332 ユーザーの名前: user-name パスワード: user-password 投げつけているbitcoin-cliのメソッド: getblockchaininfo  curl --data-binary &#39;{&amp;quot;jsonrpc&amp;quot;:&amp;quot;1.0&amp;quot;,&amp;quot;id&amp;quot;:&amp;quot;curltext&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;getblockchaininfo&amp;quot;,&amp;quot;params&amp;quot;:[]}&#39; -H &#39;content-type:text/plain;&#39; http://user-name:user-password@127.0.0.1:8332/ | jq  3. 自作プログラムでPOSTしてアクセスする. bitcoindはHTTPリクエストメソッドのPOSTに対応しているので, JSON-RPCをPOSTで投げつける. 以下のプログラムはNode.jsを使った例.
 https://github.com/solareenlo/bc-json-rpc  </description>
    </item>
    
    <item>
      <title>このサイトの作り方</title>
      <link>https://solareenlo.com/posts/how-to-make-this-site/</link>
      <pubDate>Tue, 16 Apr 2019 06:49:32 +0900</pubDate>
      
      <guid>https://solareenlo.com/posts/how-to-make-this-site/</guid>
      <description>Macユーザー用
 ものすごい初歩からこのサイトの作り方を説明しています. この手順で作成するとGitHubに全ての内容/更新履歴/更新内容が公開されますので, 適宜読み替えてください.
Macにgitをインストールする https://git-scm.com/download/mac
GitHubにアカウントを作成する https://github.com
MacにHomebrewをインストールする /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34;  References:  https://brew.sh/index_ja.html https://github.com/Homebrew/brew   MacにHugo(静的サイトジェネレーター)をインストールする brew install hugo  Reference: Install Hugo  HugoのExtendedバージョンをインストールする 以下内容をhugo_latest.sh名で保存する.
# hugo_latest.sh # Find the latest Hugo from GitHub echo &amp;#39;🐹 Starting Hugo Install / Update 🐹&amp;#39; echo &amp;#39; Note: Please be sure to have curl and grep installed&amp;#39; echo &amp;#39;&amp;#39; url=$(curl -s &amp;#34;https://api.github.com/repositories/11180687/releases/latest&amp;#34; | grep -o &amp;#39;https://.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://solareenlo.com/posts/hello-world/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/posts/hello-world/</guid>
      <description>Hello World!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/alpine-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/alpine-linux/</guid>
      <description> Alpine Linuxとは  muslとBusyBoxをベースとしたLinuxディストリビューションの1つ. セキュリティ・シンプル・リソース効率を重視するパワーユーザー向けに設計されている. とても軽量でセキュアなのでDockerのイメージ作りに使われる. 公式サイト: https://alpinelinux.org  簡単な使い方 # gitをインストール apk add git</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/angular/</guid>
      <description>Angularとは  Typescript/JavaScriptやその他の言語を使用してモバイルおよびデスクトップWebアプリケーションを構築するための開発プラットフォーム. GitHubリポジトリ: https://github.com/angular/angular References:  https://angular.io/docs https://angular.jp/docs https://angular.keicode.com   用語    用語 意味     module アプリを構成するコンポーネントを束ねたもの.   root module アプリが起動する時に呼びされる大元のモジュール.
Angularアプリには必ずある.   component View(画面の一部)を制御する.   template componentのUIをどのようにHTMLで表現するかを指定するもの.
.htmlのこと.   Decorators モジュールやクラスなどの要素に対してメタ情報を付与するもの   constructor TS, JSに付随するものでClassの初期化時に発動する   data binding コンポーネントにおいてテンプレートとクラス内の要素を繋ぐ仕組み.
テンプレートとコンポーネントのコードを繋ぐ方法   template reference variable #testを使って, そのDOM要素をtest変数で参照できるようにする仕組み.    Decoratorsのパラメーター    パラメーター名 意味     imports 現在のモジュールで利用する他のモジュール／コンポーネント   exports 現在のモジュールで外部に公開するコンポーネントなど   declarations モジュール配下のコンポーネント   bootstrap 最初に起動すべき最上位のコンポーネント(＝ルートコンポーネント)   templateUrl 描画するhtml   template 描画する内容   styleUrls どのcssを使うか   styles 直接cssの内容を記述する   selector コンポーネントの適応先を表す(html, css, classなどとして指定できる)    インストール npm i -g @angular/cli @angular/core バージョンアップ ng update @angular/cli @angular/core DockerでAngular Dockerfileの中身</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/aws/</guid>
      <description>アマゾンウェブサービス（AWS）とは  Amazonが提供するパブリッククラウドコンピューティングのこと. 従量課金制. コンピューティング, ストレージ, データベース, 分析, ネットワーキング, モバイル, 開発者用ツール, 管理ツール, IoT, セキュリティ, エンタープライズアプリケーションなど, グローバルなクラウドベース製品を幅広く利用できる.  S3  インターネット用のオブジェクトストレージサービスのこと. Amazon Simple Storage Serviceの略.  Elastic Beanstalk  Java, .NET, PHP, Node.js, Python, Ruby, GoおよびDockerを使用して開発されたウェブアプリケーションやサービスを, Apache, Nginx, Passenger, IISなどのサーバーでデプロイおよびスケーリングするためのサービスのこと. 平たく言うとアマゾン版VPS.  SSH接続  インスタンスを立ち上げる. インスタンスにキーペア(秘密鍵/公開鍵のペア)を設定する. 秘密鍵をダウンロードして(ファイル名sshkey.pem), インスタンスのIPアドレスを確認して, 以下を実行.
chmod 600 sshkey.pem ssh -i sshkey.pem ec2-user@000.000.000.000 後は普通のVPSと同じ.
  Amazon Linuxのバージョン確認 cat /etc/system-release お名前.comで取得したドメインを割り当てる  Route 53でCreate Hosted Zoneボタンを押す. Domain Nameに, example.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/blockchain/</guid>
      <description>Blockchainとは  正しい記録しか記録できず、記録を変更・改ざんできない。（耐改ざん性） 管理者不在で、参加者全員で共有・運用する。（非中央集権・トラストレス・自律的） ネットワーク共有型データベース。（分散型DB） 後方参照するハッシュポインタをもつ連結リスト Reference: ブロックチェーンのデータ構造をJavascriptで作ろう  Blockchainの仕組み  プロトコルに従った書式のDBだけが記録される。 参加者全員によって合意されたデータだけが有効となる。 一度書き込まれたデータは変更も削除もできない。 システム全体を止めることはほぼできない。 記録されるのは取引の履歴だけ。  BlockChainの歴史  1980年代のリバタリアニズム. 中央集権が可能な限り最小限でなければならいという考え. 政治的イデオロギー. 1990年代のサイファーパンクの結成  個人の通信における本当のプライバシーを我々に与える保障を、法的にではなく物理的・数学的に保証する。  サイファーパンクの理念  プライバシーというのは選択的に自己開示する力のことをいう。 開かれた社会においてはプライバシーには匿名の取引システムが必須だ。 我々サイファーパンクは匿名システムの建設に献身する。 Reference: ビットコインに実は４０年の歴史【サイファーパンク宣言を読む】全文和訳掲載   BlockChainにはブロックが必要？  台帳記録にはブロックは必須要素ではない. ブロックの承認のためのルールが記載されている. コンセンサスを駆動する本体はブロック ノードは単なるスクリプト処理系  BlockChainのコンセンサスによるガバナンス  ブロックチェーンノードが コンセンサスの主体 ブロックを承認する ブロック作成者（マイナー）は 信頼点ではない コンセンサスの結果（承認）に支配される Reference: 地域におけるブロックチェーン活用の可能性  BlockChainが発達すると消える産業  公証人 各種仲介業者（アート的発想で価値を判断する人は必要） 第一次産業・トレーサビリティー 貧困解消 裁判の証拠 References:  第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 3 第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 2   Blockchainの進化 パターン1  Blockchain 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/c/</guid>
      <description> C言語とは 1972年のAT&amp;amp;Tベル研究所で, ブライアン・カーニハンとデニス・リッチーによって開発された, コンパイル型の汎用プログラミング言語のこと.
Hello World #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;#34;Hello, world!&amp;#34;); return 0; } コンパイラ  低レイヤを知りたい人のためのCコンパイラ作成入門  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/circleci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/circleci/</guid>
      <description>CircleCIとは  クラウド上でCI/CDを行なってくれるサービスの1つ. 公式サイト: https://circleci.com  docs  CircleCI Documentation  AWSのS3へデプロイ  Nuxt.js+CircleCIで静的ページをAWSのS3へデプロイする  AWSのElastic Beanstalkへデプロイ  以下でCircleCIでElastic Beanstalk CLIを起動して, デプロイする.
# .circleci/config.yml version: 2 jobs: deploy: working_directory: ~/app docker: - image: circleci/ruby:2.6.3 steps: - checkout - run: name: Installing deployment dependencies working_directory: / command: | sudo apt-get -y -qq update sudo apt-get install python-pip python-dev build-essential sudo pip install --upgrade setuptools sudo pip install awsebcli --upgrade - run: name: Deploying command: eb deploy master-TaxPlusAws01-env workflows: version: 2 build: jobs: - deploy: filters: branches: only: - master 以下はElastci Beanstalk CLIの設定.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/cloud/</guid>
      <description> クラウドコンピューティングとは クラウドサービスプラットフォームからインターネット経由で処理能力, データベースストレージ, アプリケーション, および他のITリソースをオンデマンドかつ従量制料金で利用するシステムのこと.
比較  ilyas-it83/CloudComparer  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/command/</guid>
      <description>コマンドとは  コンピュータに特定の機能の実行を指示する命令のこと. たくさんのコマンドがあり, 黒い画面に直接入力する.  Linuxでhtmlを開く xdg-open index.html プロセスの動作状況 (ps) psコマンドはプロセスの動作状況を確認するためのコマンド.
auxオプション
auxオプションは、aとuとxというオプションを組み合わせたものです。
 a: 端末操作のプロセスを表示する u: CPUやメモリの使用率などを表示する x: 端末操作以外のプロセスを表示する  ps aux &amp;gt; USER PID %CPU %MEM VSZ RSS TT STAT STARTED TIME COMMAND &amp;gt; solareenlo 96263 4.3 2.0 5500012 168620 ?? S 水07PM 21:03.04 /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal &amp;gt; その他たくさん こんな感じで標準出力される.
Reference: ps auxの見方がよく判らない・・・
sha256を出力 # Mac shasum -a 256 &amp;lt;ファイル名&amp;gt; # Linux sha256sum &amp;lt;ファイル名&amp;gt; 所有権を変更 (chown) ファイルのユーザー所有権とグループ所有権をrootからsolareenloへ変更する
sudo chown solareenlo:solareenlo ファイル名 # 再帰的に変更 sudo chown -R solareenlo:solareenlo ファイル名 基本的なUnixコマンドの使い方 mkdirを使って一気にファイルを複数作成する # app1, app2, .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/container/</guid>
      <description>コンテナ技術とは OS上に他のプロセスからは隔離されたアプリケーション実行環境を構築することで, 仮想的な動作環境をより少ないコンピュータリソースで実現する技術のこと.
Reference: コンテナ技術とは何？
コンテナとは  コンテンは仮想マシンの一種. コンテナ型仮想化という技術を使っている. 特徴  コンテナの容量が小さい 現実的な速度で, インターネット経由で受け渡しできる. 動作が軽い １つのホストOS上でたくさんのコンテナを動かすことができる.  そしてコンテナが増えすぎたので, 複数のコンテナを管理するコンテナ・オーケストレーションが生み出された.  Reference: Kubernetesってなにそれおいしいの？という人向けの超入門</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/crypto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/crypto/</guid>
      <description>暗号通貨/暗号資産とは 暗号技術を用いた通貨/資産のこと.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/css/</guid>
      <description>CSSとは  ウェブページのスタイルを指定するための言語. Cascading Style Sheetsの略.  Bootstrap  Webアプリケーションフレームワークの1つ.  グリッドシステム Reference: Bootstrapのグリッドシステムの使い方を初心者に向けておさらいする
&amp;lt;div class=&amp;#34;contaiiner&amp;#34;&amp;gt; /* 固定枠 */ &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; /* row枠 */ &amp;lt;div class=&amp;#34;col-xs-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* スマホ枠 */ &amp;lt;div class=&amp;#34;col-sm-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* タブレット枠 */ &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* PC枠 */ &amp;lt;div class=&amp;#34;col-lg-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* PC大枠 */ &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Reference: Bootstrapのグリッドシステムについてまとめてみた</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker-compose/</guid>
      <description>Docker Composeとは  複数のコンテナで構成されるアプリケーションを定義と実行するためのツールのこと. Dockerとは切り離されてる. Composeはアプリケーションのサービスをファイルで定義する. Dockerコマンドと高い親和性があるため, 学習コストが比較的低い. Swarmモードにサービスをデプロイできるオーケストレーション機能もある.  Reference: Docker Compose 徹底解説  GitHubリポジトリ: https://github.com/docker/compose  活用場面  利用者視点  docker-compose.ymlがあれば, すぐに何でも実行できる.  開発者視点  環境の再構築が簡単 バージョン違いの環境を作りやすい 1つのマシン上に, 複数の環境を立ち上げられやすい   適切に書かれたYAMLファイルさえあれば, 誰でも簡単に環境構築もアプリケーション実行もできるのが強み.
インストール  https://docs.docker.com/compose/install/  docker-compose.ymlの書き方  services:(使うイメージ), networks:(使うネットワーク), volumes:(使うボリューム)を定義する. docker-compose.ymlの書き方 -&amp;gt; Docker Compose - docker-compose.yml リファレンス  公式Reference  Compose file version 3 reference  working directory指定 working_dirを使う.
version: &amp;#39;3&amp;#39; services: angular: image: angular-first-app ports: - &amp;#34;4200:4200&amp;#34; volumes: - .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker-hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker-hub/</guid>
      <description> Docker Hubとは  コンテナイメージをビルドしたり配布したりする場所. 公式サイト: https://hub.docker.com  配布方法 イメージをそのままpush # 先ずはDocker Hubにログインする docker login # 自分の名前でtag付けしてイメージを作成する docker image build -t solareenlo/test . # そして, Docker Hubにpushする docker push solareenlo/test GitHubからDockerfileをpush </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker1/</guid>
      <description>Dockerとは コンテナ型の仮想環境を作成, 配布, 実行するためのプラットフォームのこと. プロセスを簡単にコンテナ化(isolate)し, 簡単かつ素早く開発・移動・実行できるプラットフォームのこと.
 Dockerコンテナは実行に必要な全てをパッケージして簡単に動かせる Dockerイメージは複数のイメージ・レイヤとメタ情報の積み重なりからできている. コンテナのプロセスはデフォルトでisolate(隔離・分離)された状態  Dockerについての良い読み物1→2018年なぜ私達はコンテナ/Dockerを使うのか. Dockerについての良い読み物2→標準化が進むコンテナとサーバーレス！ 「提供したい価値」から見極める活用の勘所とは【デブサミ2018 福岡】 Dockerについての良い説明→いまさらDockerに入門したので分かりやすくまとめます Dockerについての良いスライド→Docker Compose 徹底解説  公式サイト: https://www.docker.com  Dockerのメリット/デメリット メリット  ゲストOSはホストのKernelを直接使うためオーバーヘッドが小さくて高速 ゲストOSがそれぞれにKernelを持たないため, Memory消費量やDisk消費量を節約できる 必要とする資源が少ないため, 多くのゲストOSを立ち上げることが可能 Kernelを新しく起動する必要がないため, ゲストOSの起動が速い コンテナのイメージ(雛形)からコンテナ(実体)を作るため, 同一構成のOSを簡単に複数作れる テストが通ったイメージは本番環境でもすぐに使える(開発とデプロイのサイクルが速い)  Reference: Dockerの利点   デメリット  提供できるホストの種類が少ない(ホストOSのKernelにLinux使ってたらゲストOSのKernelにWindows Serverは使えない) 完全仮想化に比べて, 管理者が学ぶべきことが多い  Reference: Dockerの欠点   なぜrootユーザーか Dockerはroot権限で動いているデーモン(dockerd)とunixソケットまたはtcp/ipで通信しているが, dockerdにアクセスするにはdockerグループに所属しているかroot権限が必要. そしてdockerはroot無しでアクセスできる様にすると簡単に権限昇格ができてしまい, いろんなことができる様になってしまうから.
Reference: Dockerでユーザーをdockerグループに追加することの危険性を理解しよう
インストール方法 Linux編 curl -fsSL get.docker.com -o get-docker.sh sh get-docker.sh 基本的な使い方(v18.09.5) Reference: Dockerコマンドメモ</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker2/</guid>
      <description>Docker その2 コンテナの基本的な動かし方 # run = create + start docker run busybox echo hi there &amp;gt; hi there # コンテナ作ってスタートさせる docker create --name my-busybox busybox echo hi there docker start -a my-busybox &amp;gt; hi there # 一定期間後に終了 docker stop CONTAINER_NAME # 直ぐに終了 docker kill CONTAINER_NAME # Image,Container,Volumeの数や容量を表示 docker system df # 止まってるContainer, 使われてないVolume, 使われてないNetwork, 使われてないImageを削除 docker system prune # 現在動いているredisコンテナにアクセスする docker run --name myredis -d redis docker exec -it myredis redis-cli 127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/ethereum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ethereum/</guid>
      <description>Ethereumとは GitHubリポジトリ: https://github.com/ethereum
目的 ブロックチェーン上でアプリを動かして, スマートコントラクトを実行できるようにし, 経済をさらに発展させる.
アプリの特徴: 分散型, 管理者不在, 一度デプロイすると修正不可
特徴  分散型アプリケーション(スマートコントラクト)のプラットフォーム 各ノードにバーチャルマシーン(通称: EVM)を積んでいるのでチューリング完全なスクリプトがEthereum上で書ける. アカウントベース ブロックチェーン2.0の代表格  スケーリング方法  サイドチェーン  Plasma: Ethereumのメインチェーンとは別のプラズマチェーンと呼ばれるサイドチェーンをマークル木状にどんどん連ねることで, メインチェーンに格納される情報量を減少させる仕組み. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 初心者向けプラズマ勉強法まとめノートー 0から3週間で学んだこと lightningとplasmaってなにが違うんですか？ Plasma スケーラブルな自律型スマートコントラクト  オフチェーン  Raiden Network: ブロックチェーン内の処理をブロックチェーンの外側に持っていくことで, メインチェーンの負担を軽減する仕組み. 最終的な取引結果のみをブロックチェーンで処理する.  シャーディング  トランザクション処理を各ノードで分割して行うことで, 処理速度の向上を図る仕組み. Ethereum2.0のCasperで導入されるPoSと相性が良い. Ethereumのシャーディング概論   スマートコントラクトとは  何人かが合意した内容（契約）を、ヒトがいなくても自動的に実行する仕組み  例は自動販売機   Ethereum dapps開発七つ道具  Solidity MetaMask Truffle, Ganache web3.js OpenZepplien Remix Google翻訳  と, 上記の内容を広く浅く説明してくれてるサイト</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/firebase/</guid>
      <description> Firebaseとは  GCPのmobile Backend as a Service (mBaaS)のこと. GitHubリポジトリ: https://github.com/firebase/  ハンズオン  web Android iOS  ハンズオンプレゼン資料  Firebase Hands-on  良いところ  AUTHが自動. クライアントから直に呼べる. スケジューラが出てきた.  悪いところ  クエリができない. ので, 別のところでDBの検索をしてる. ローカルで動かせない.  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/gcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/gcp/</guid>
      <description> Google Cloud Platform(GCP)とは Gogleが提供するパブリッククラウドコンピューティングのこと.
GKE コンテナ化されたアプリケーションをデプロイするためのマネージド型の本番環境のこと.
Google Kubernetes Engineの略.
Cloud Shell ブラウザでShellが扱える.
右上のメニューに起動するためのボタンがある.
# 使うプロジェクトの設定 gcloud config set project &amp;lt;プロジェクトID&amp;gt; # 使うゾーンの設定 gcloud config set compute/zone asia-east1-c # 使うコンテナクラスタを設定 gcloud container clusters get-credentials &amp;lt;クラスタ名&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/git/</guid>
      <description>Gitとは  プログラムのソースコードなどの変更履歴を記録・追跡するための分散型バージョン管理システムのこと. 公式サイト: https://git-scm.com  gitの構成  作業ディレクトリ ステージングエリア（インデックス） リポジトリ（ローカル, リモート）  git補完 Reference: 「Git補完をしらない」「git statusを1日100回は使う」そんなあなたに朗報【git-completionとgit-prompt】
git-completion.bashをインストール git-completion.bash: gitコマンドの補完スクリプト. Tabで保管できる.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O ~/.git-completion.bash chmod a+x ~/.git-completion.bash echo &amp;#34;source ~/.git-completion.bash&amp;#34; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc git-prompt.shのインストール git-prompt.sh: プロンプトに各種追加情報を表示可能にするスクリプト.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -O ~/.git-prompt.sh chmod a+x ~/.git-prompt.sh 下記を一度にコピペしてエンターをして,
cat &amp;lt;&amp;lt; EOF | tee -a ~/.bashrc &amp;gt; /dev/null source ~/.git-prompt.sh GIT_PS1_SHOWDIRTYSTATE=true GIT_PS1_SHOWSTASHSTATE=true GIT_PS1_SHOWUNTRACKEDFILES=true GIT_PS1_SHOWUPSTREAM=&amp;#34;auto&amp;#34; GIT_PS1_SHOWCOLORHINTS=true EOF 下記を実行する.
source ~/.bashrc branch local branchから新branch作成 cd ディレクトリ # 作業ディレクトリに移動 git branch -a # branchの一覧を表示 git checkout master # master branchに切り替え git checkout -b 作成するbranch名 # masterを元にして新しいbranchを作成 git branch -a git push -u origin 作成したbranch名 # branchをremoteに登録 リモートbranchから新branch作成 cd ディレクトリ git checkout -b ローカルに作成するbranch名 origin/再生元のリモートbranch名 git branch -a branchの削除 cd 作業ティレクトり git checkout -b master # 削除したいbranchとは違うbranchにまずは移動する git branch --delete 削除したいbranch名 # mergeしたbranchを削除 git branch -D 削除したいbranch名 # mergeしたかどうかは問わずに削除 remote remoteから特定のbranchを指定してcloneする git clone -b japanese git@github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/github/</guid>
      <description>GitHubとは  ソフトウェア開発のプラットフォーム兼ソースコードなどのホスティングサービス. https://github.com  GitHubとGitLab同時にpush 先ずは普通にGitHubとGitLabにリポジトリを作成し, リモートリポジトリを追加する.
# GitLabのリポジトリをリモートに追加 git remote set-url --add origin git@gitlab.com/solareenlo/リポジトリ名.git # 確認 git remote -v &amp;gt; origin git@github.com:solareenlo/リポジトリ名.git (fetch) &amp;gt; origin git@github.com:solareenlo/リポジトリ名.git (push) &amp;gt; origin git@gitlab.com:solareenlo/リポジトリ名.git (push) # 以下を行うとGitHubとGitLabに同時にpushされる. git push -u origin master GitHub Pagesで静的サイトを公開する cd 作業ディレクトリ名 git checkout -b gh-pages vim index.html // index.htmlを作成 git push -u origin gh-pages gh-pagesという名前のブランチにindex.htmlファイルを作っておけば, それが静的サイトとして「https://ユーザー名.github.io/リポジトリ名」として公開される.
リポジトリに他のリポジトリをリンク付けする git submodule add -b &amp;lt;リンク付けする方のブランチ名&amp;gt; &amp;lt;リンク付けする方のURL&amp;gt; &amp;lt;リンク付けされるディレクトリ名&amp;gt; リポジトリをforkして更新する fork -&amp;gt; clone -&amp;gt; remote -&amp;gt; fetch -&amp;gt; marge -&amp;gt; push</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/haskell/</guid>
      <description> Haskellとは  純粋な関数型プログラミング言語の1つ. 公式サイト: https://www.haskell.org  静的サイトジェネレーター  HAKYLL  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/hugo/</guid>
      <description>Hugoとは  静的なhtmlを生成する事ができる静的サイトジェネレータの1つ. Go言語で書かれてる. 記事を書くだけならGo言語を知らなくても良い. 記事はMarkdownで書ける. GitHubリポジトリ: https://github.com/gohugoio/hugo  .mdを削除した時に.htmlも同様に削除するオプション hugo server -D --cleanDestinationDir MacでHugoとGitHub Pagesを使ってのサイトの作り方 こちら
Hugoのコードの色選択  https://help.farbox.com/pygments.html Chroma Style Gallery  全文検索 Search for your Hugo Website
見た目変更 このサイトだと/サイトのディレクトリ/themes/book-fork/assets/の中の.scssファイルを操作する.
イラストの追加  このサイトだと/ブログのディレクトリ/layouts/shortcodes/fontawesome.htmlに
&amp;lt;span class=&amp;#34;inline-svg&amp;#34; &amp;gt; {{- $fname:=print &amp;#34;fontawesome/&amp;#34; ( .Get 0 ) &amp;#34;.svg&amp;#34; -}} {{- $path:=&amp;#34;&amp;lt;path&amp;#34; -}} {{- $fill:=&amp;#34;&amp;lt;path fill=\&amp;#34;currentColor\&amp;#34;&amp;#34; -}} {{ replace (readFile $fname) $path $fill | safeHTML }} &amp;lt;/span&amp;gt; を追加する.
 svgファイルをどこからかダウンロードしてくる. オススメはFontawesomeのGitHubリポジトリから目当てのsvgファイルを見つけて, curlとかで/ブログのディレクトリ/content/fontawesome/にダウンロードしてくる.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/javascript/</guid>
      <description> JavaScriptとは Webページを構成する全てのオブジェクトを操作できるプログラミング言語.
人間の顔に例えると,
 骨格がhtml お化粧がcss 表情がJavaScript  といった感じ.
フレームワーク 比較  2019年イチ押しのJavaScriptフレームワークオーバービュー JavaScript: フレームワーク React/Vue/Angularについて 2018 JavaScript Rising Stars  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/jenkins/</guid>
      <description> Jenkinsとは  オンプレミスのCI/CDツール. Jenkinsが全てのビルドプロセスの自動化を行うものではない. テストやデプロイなどの各フェーズはそれぞれ専用のツールで自動化を行い, Jenkinsはどういったタイミングでどのツールを呼び出すのかを指示し, エラーが出たら即座にフィードバックを行う処理をする. 公式サイト: https://jenkins.io  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/kubernetes/</guid>
      <description>Kubernetesとは  Dockerコンテナのクラスタ管理を始めとしたオーケストレーションを行うサービスのこと. ホスト間の連携やデプロイについても総括的に管理できる(ここがDocker Composeと違うところ). Kubernetesの大きな特徴の1つに宣言的設定がある.  宣言的設定とは, イミュータブルなインフラを作るための基本的な考え方で, 「システムのあるべき姿」を設定ファイルに宣言する！という考え方.  Kubernetesは設定ファイルに書いたとおりのインフラを維持するように設計されている.  ので, 設定ファイル(yamlファイル)をたくさん書く事になる.  Reference: Docker Compose利用者から見た Kubernetes 開発環境構築入門 GitHubリポジトリ: https://github.com/kubernetes  他のオーケストレーションと違うところ ① 様々なOSSと組み合わせることにより, 柔軟に機能拡張なところ.
 コンテナ運用を更に効率化 / 高速化  詳細なメトリック監視と可視化・・・Prometheus + Grafana コンテナのログの転送収集・・・Fluentd / Fluent Bit ネットワークトラフィックの制御・・・ Istio + Envoy  Kubernetesの適応領域の拡大  機械学習プラットフォーム・・・Kubeflow 分散ストレージ・・・Rook 分散型データベース・・・Vitess   ② 本格的な宣言的オペレーションとInfrastructure as Codeを実現可能
③ クラスター上にデプロイするシステムの構成をコード(マニフェストファイル)によって定義できる
 運用オペレーションはコードの変更によって実施し, 作業を簡素化する. 複数Kubernetesクラスターでの相互運用を実現する  Reference: Kubernetesの基礎
Docker Composeとの違い Docker Composeは動作させるコンテナを意識するだけでほとんど良かったが, Kubernetesではそれに加えて動作させるホスト(Node)やコンテナのグループ化(Pod), その複製(ReplicaSet)と公開(Service, Ingress)といったインフラレベルで意識していたことも全て設定ファイルの1つとして管理できる.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/linter-formatter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/linter-formatter/</guid>
      <description> Linterとは コードの間違いを指摘するもの.
Formatterとは コードのスタイルを統一/調整するもの.
Prettier  JavaScript(including ES2017), JSX, Angular, Vue, Flow, TypeScrip,t CSS, Less, SCSS, HTML, JSON, GraphQL, Markdown, GFM, MDX, YAMLをフォーマットしてくれる. GitHubリポジトリ: prettier/prettier  vimでの使い方  こちらの.vimrcの様にvim-prettierを設定する. 当該のディレクトリで,
yarn add prettier --dev --exact コードを開いて, コードの一番上に// @formatを記入して,
:w で, 自動でコードをフォーマットしてくれる.
 Reference: prettier/vim-prettier
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/nodejs/</guid>
      <description>Node.jsとは  サーバーサイドJavaScript環境のこと. サーバーサイドもJavaScripで記述できるようにした. シングルスレッドでノンブロッキングI/Oを行う. GitHubリポジトリ: https://github.com/nodejs  インストール Mac: https://nodejs.org/en/
Ubuntu: Official Node.js binary distributions
テストツールの種類  テストの環境を提供する（Mocha, Jasmine, Jest, Karma） テストの構造を提供する（Mocha, Jasmine, Jest, Cucumber） アサーション機能を提供する（Chai, Jasmine, Jest, Unexpected） 生成, 表示, テスト結果をウォッチする（Mocha, Jasmine, Jest, Karma）
以前の実行時からの変更が意図されたものであることを確認するために, コンポーネントやデータ構造を生成し, スナップショットを比較する（Jest, Ava） モック, スパイ, スタブを提供する（Sinon, Jasmine, enzyme, Jest, testdouble) コードカバレッジのレポートを生成する（Istanbul, Jest) シナリオ実行の管理ができるブラウザ, または疑似ブラウザの環境を提供する（Protractor, Nightwatch, Phantom, Casper）  Reference: 2017年JavaScriptのテスト概論
日付を扱う  moment/moment iamkun/dayjs date-fns/date-fns  引数で判定 引数1つでok. それ以外は強制終了する.
if(process.argv.length !== 3) { console.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/npm/</guid>
      <description>NPM  Node.jsのパッケージ管理ツール. 公式サイト: https://npmjs.com  インストール npm自体のインストール  Downloading and installing Node.js and npm  npm自体のupdate npm update -y npm # もしくは npm install npm@latest -g npm自体のバージョン管理 Reference: How to Update Node.js to Latest Version (Linux, Ubuntu, OSX, Others)
パッケージのインストール npm i &amp;lt;パッケージ名&amp;gt; # 本番環境へインストール npm i -D &amp;lt;パッケージ名&amp;gt; # 開発環境へインストール パッケージの脆弱性確認 npm audit パッケージを最新へ npm outdated # 新しいバージョンを確認 npm install -g npm-check-updates # アップデートマネージャーをインストール ncu # 新しいバージョンを確認 ncu -u # package.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/programming-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/programming-language/</guid>
      <description>プログラミング言語とは コンピュータに解釈できるようにつくられた人工言語. コンピュータへの指令であるプログラムを書くのに使われる. いろんな特徴を持っている.
いろんな指標によるランキング  TIOBE Index (TOIBEによる検索エンジンによる各種プログラミング言語の話題度ランキング) RedMonk (RedMonkによるランキング) Interactive: The Top Programming Languages 2018 (IEEEによる2018年度のランキング) PYPL PopularitY of Programming Language (PYPLによるGoogleによるチュートリアル検索ランキング)  プログラミング言語の型 代表的なもの3つ
   種類 説明     オブジェクト指向型 「モノ」を組み立てるように表現して, コンピュータに動作をさせる.   続き型 上から下まで単調なルールで文章を読むように動作する.   関数型プログラミング 数学の関数のイメージでデータに何かしらの処理をして答えを取得するように動作する.    オブジェクト指向プログラミング いろんな特徴.
   原則 説明     カプセル化 自由なアクセスからデータを保護する仕組み   継承 再利用性を高めて, 冗長性を避けるための強力なツール   ポリモーフィズム メッセージの送信側とメッセージの受信側が動的に決まる仕組み     オブジェクトは, オブジェクトに含まれるデータを操作する関数を有している.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/programming/</guid>
      <description>プログラミングとは コンピュータプログラムを作成することにより, 人間の意図した処理を行うようにコンピュータに指示を与える行為のこと. その為の便利なツールがたくさんある.
プログラミングをするのに役立つツール  プログラミング言語 (C, Java, JavaScript, Pythonなど)  手続き型, オブジェクト指向型, 関数型, 静的型付け, 動的型付けなどいろんな種類がある. 最終的にバイナリデータになって, コンピュータが処理する.  テキストエディタ (Visual Studio Code, Vimなど)  コードを書くのに役に立つエディタ.  統合開発環境 (Visual Studio, Jet Brainsなど)  コンパイル, テキストエディタ, デバッガなどを1つのソフトで行えるようにしたもの.  バージョン管理システム (gitなど)  ファイルの変更履歴を管理する為のシステム.  ホスティングサービス (GitHub, GitLabなど)  上記gitを使って様々なプログラムをweb上に公開したり, それを通じて交流したりすることができるサービス. 無償・有償がある.  Linter/Formatter  コードのエラー指摘やスタイル調整をしてくれる.   勉強する  repl.it (オンラインIDE) hackr.io (コースやチュートリアルの紹介サイト)  ディベロッパーロードマップ  フロントエンド - https://roadmap.sh/frontend バックエンド - https://roadmap.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/react-static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/react-static/</guid>
      <description> React Staticとは  React Staticは, Reactとそのエコシステムをベースにした, 高速, 軽量, そして強力なプログレッシブ静的サイトジェネレータ. これは, Create React Appなどのツールで慣れていたシンプルさと開発者の経験に似ており, パフォーマンス, 柔軟性, およびユーザー/開発者の経験のために慎重に設計されている. GitHubリポジトリ: nozzle/react-static  エラー処理 Error: ENOSPC: System limit for number of file watchers reached, watchと出たら echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/react/</guid>
      <description>Reactとは  Facebookとコミュニティによって開発されているUIに特化したJavaScriptライブラリ. Facebookはコアの部分だけを作成して, コミュニティがその周りをどんどん作っている. Virtual DOM(仮想DOM)と呼ばれるレンダリング機構を採用している. Virtual DOMを採用しているので, ページに表示されている広いエリアの情報をJavaScriptで管理しておき、なにか変更があった場合に変更箇所のみを再描画するUIなどに向いている. GitHubリポジトリ: https://github.com/facebook/react/ Reference: Reactとは? – React入門  用語    名前 意味     Virtual DOM DOMを作るために必要な情報を持っているオブジェクト.Virtual DOMの内容を元にHTMLを作成してブラウザに描画する.   JSX Virtual DOMの元となる構文.Babelがscript要素の内容をブラウザが解釈できるように変換を行う.JSV -&amp;gt; JavaScriptと変換される.基本的にはHTMLと同じ記法.   コンポーネント 個々の部品HTMLのパーツをコンポーネント単位で管理し組み合わせてUIの作成を行う.   props 親コンポーネントから渡されたプロパティ不変のデータ   state そのコンポーネントが持っている状態可変のデータ    Reduxとは  Reactが扱うUIのstateを管理するためのフレームワーク. ReactはFluxを採用しているが, ReduxはFluxの概念を拡張してより扱いやすくしたもの. Reduxはstateを管理するフレームワークなのでReact以外にもAngularやjQueryとも併用できるがReactが一番相性が良い.  3大原則  Single source of truth (信頼できる唯一の情報源) State in read-only (stateは常に読み取り専用にする) Changes are made with pure functions (actionがstateを変更する際にreducerを通して行う)  要素    名前 機能     Action 入力内容を元にデータを作成する   ActionCreator    Store データを貯める   State    Reducer 前の状態から新しい状態への純粋な関数    図解 Flux</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/redis/</guid>
      <description> Redisとは  ネットワーク接続された永続化可能なインメモリデータベースのひとつ. インメモリデータベースとは, メモリ上にデータを保存するタイプのデータベースのこと. メモリはCPUから直接アクセスできるため, （RDBなどの）ストレージにデータを保存するオンディスクDBに比べ, とても高速に動作することができる. GitHubリポジトリ: https://github.com/antirez/redis  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/rust/</guid>
      <description> Rustとは  Mozillaが支援するオープンソースのシステムプログラミング言語のこと. 速度, 安全性, 平行性の3つのゴールにフォーカスしている. GitHubリポジトリ: https://github.com/rust-lang/rust  Hello World! fn main() { // 世界よ、こんにちは  println!(&amp;#34;Hello, world!&amp;#34;); }  ドキュメントの日本語訳  Rustの日本語ドキュメント/Japanese Docs for Rust The Embedded Rust Book  rust-lang.orgの日本語化  https://pontoon.rust-lang.org  チートシート  Rust Language Cheat Sheet  RustでOSを書く  Writing an OS in Rust (Second Edition)  リンク  Rustのリンク集  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/sed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/sed/</guid>
      <description> sedとは  入力ストリーム（ファイルまたはパイプラインからの入力）に対してテキスト変換などのデータ処理をおこなうプログラム. 名称「sed」は「ストリームエディタ」を意味する英語「stream editor」から.  .gitignoreの/distを削除 sed -i -e &amp;#34;/\/dist/d&amp;#34; .gitignore # -i: 上書き保存 # -e: 行の削除 # d: 行目を表す(上の例だと\distを含む行)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/sendgrid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/sendgrid/</guid>
      <description> SendGridとは  メール配信のSaas. APIライブライのGitHubリポジトリ: https://github.com/sendgrid APIライブライはコミュニティが作ってるので正規のサポート対象外.  mailテンプレートのテンプレート  https://www.dyspatch.io/resources/templates/ How to send an email with Dynamic Transactional Templates  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/shell-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/shell-script/</guid>
      <description>シェルスクリプトとは  シェルとはOSと対話するためのインターフェースであり, それのスクリプトがシェルスクリプト.
 シェルスクリプトモードで実行するのとfilename.shを作って, bash bash filename.sh  で実行する2パターンあります.  チェック  ShellCheck  シェルスクリプトモードに突入 /bin/sh $ または
sh $ Hello World sh $ echo Hello World Hello World $ シェルスクリプトモードから脱出 CTLとdを押す.
初めてのシェルスクリプト # まず, bashがどこにあるか調べる which bash &amp;gt; /bin/bash  #!のことを「シェバン」もしくは「シバン」という. shell scriptファイルの頭に#! /bin/bashと書いてあげる.  vim hello i #i /bin/bash echo hello Esc :wq ls -l &amp;gt; -rw-rw-r--. 1 solareenlo solareenlo 24 日付 hello chmod +x hello ls -l &amp;gt; -rwxrwxr-x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/substrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/substrate/</guid>
      <description> Substrateとは  カスタムブロックチェーンプログラムを開発するためのフレームワークのこと. Runtime, SRML, SKD, Client Appを作ることができる. オープンソースで提供されている. 開発元はParity Technologies. Githubリポジトリ: https://github.com/paritytech/substrate References:  第7回ブロックチェーン勉強会 なぜSubstrateでブロックチェーンを作るのか   Substrateを学んでみる  SubstrateKitties 初心者のためのPolkadot Polkadot / Substrateの必読資料をまとめた Staked Substrate/Polkadot  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/terminal/</guid>
      <description>ターミナルとは GUIの上でCUIの操作をしたいときに使用するアプリケーションのこと.
コンソール/ターミナル/シェルの違い  コンソールとは入出力をつかさどる端末ハードウェア ターミナルとはGUIでCUI環境を再現するもの シェルとはCUI環境におけるOSとの対話的インターフェイス  Reference: 【初心者向け】シェル・ターミナル・コンソールの違いとは？   下地にシェルがありコンソールやターミナルから命令をOSへ伝達してくれる.
コンソールでアクセスしてもターミナルでアクセスしても対話するものはシェルとなる.
コンソールの場合はハードウェア的に直にアクセスしているがターミナルの場合はGUI環境でソフトウェア的にシェルを呼び出し命令を実行するようになっている.
ターミナルの色を変える ~/.bashrcの当該部分を以下の様に書き換える.
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\n\[\033[01;35m\]-&amp;gt; \$\[\033[00m\] &amp;#39; else PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; fi ターミナルのJSON出力に色付けする jqを使う.
# こんな感じ echo &amp;#39;{&amp;#34;items&amp;#34;:[{&amp;#34;item_id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;すてきな雑貨&amp;#34;,&amp;#34;price&amp;#34;:2500},{&amp;#34;item_id&amp;#34;:2,&amp;#34;name&amp;#34;:&amp;#34;格好いい置物&amp;#34;,&amp;#34;price&amp;#34;:4500}]}&amp;#39; | jq . &amp;gt; { &amp;gt; &amp;#34;items&amp;#34;: [ &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 1, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;すてきな雑貨&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 2500 &amp;gt; }, &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 2, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;格好いい置物&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 4500 &amp;gt; } &amp;gt; ] &amp;gt; } Reference: jq コマンドを使う日常のご紹介</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/test/</guid>
      <description> テストとは 書いたコードにバグがないか確認する行為.
テストの種類  単体テスト: 入力をモック化し, 個々の関数やクラスをテストし, 出力結果が予想通りであることを確認するテスト. 統合テスト: いくつかのモジュールを組み合わせて予想通りに動作することを保証するテスト. 機能テスト: 製品自体を使って(例えばブラウザを使って), あるシナリオをテストする. 確実に想定した動作をするかといった内部構造は考慮しない. リグレッションテスト: プログラムに機能を追加したり変更を加えたことによって、今まで普通に動いていた部分が動かなくなっていないかを確認するテスト. 受け入れテスト: システム開発を外注して, 発注者の本来の目的や意図通りに稼働するかのテスト. References:  2017年JavaScriptのテスト概論 テストの種類と技法   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/travis-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/travis-ci/</guid>
      <description>Travis CIとは  GitHub上のソフトウェアのビルドやテストを行う, オンラインで分散型の継続的インテグレーション(CI)サービスのこと. https://travis-ci.org と https://travis-ci.com の両方があるけど, 今後は.comの方を使っていく方針.  Travis CiからAWS Elastic Beanstalkへ  AWS Elastic Beanstalk Deployment  Dokcerのテストがpassedにならない時の対処法 Travis CIでDockerのテストを以下のように設定するとpassedにならないことがある.
script: docker run solareenlo/react-test npm run test -- --coverage そんな時は以下のようにテストを設定する.
script: docker run -e CI=true solareenlo/react-test npm run test -- --watchAll=falseb 環境変数が設定できない時 Travis CIの環境変数を設定する項目では特殊文字(; &amp;amp; ( ) | ^ &amp;lt; &amp;gt; ? * [ ] $ ` &amp;lsquo; &amp;ldquo; \ ! { } 改行 タブ スペース)がそのままの入力ではエスケープされないので, シングルクォーテーション(&amp;ldquo;)で囲む必要がある.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/typescript/</guid>
      <description>TypeScriptとは  マイクロソフトによって開発されているオープンソースのプログラミング言語のこと. JavaScriptに, 静的型付け・クラスベースオブジェクト指向を加えた. GitHubリポジトリ: https://github.com/Microsoft/TypeScript  初めてのTypeScript solareenlo/Typescript-Practice/01_Getting_Started
インストール npm i --save-dev typescript TypeScript + Node.js + Docker + Circle CI  TypeScript + Node.js プロジェクトのはじめかた2019 TypeScriptでExpress.js開発するときにやることまとめ (docker/lint/format/tsのまま実行/autoreload) bitjson/typescript-starter microsoft/TypeScript-Node-Starter  objectのkeyにstringを設定したら, object[key]でエラーになった時の対処法  tsconfigに--suppressImplicitAnyIndexErrorsを付け加える. ブラケット記法でプロパティにアクセスした時にany型を許容するのでとっても非推奨. 以下のようにkeyはstring型と明示する. 問題点はkeyが全てstring型になること.
interface ISomeObject { firstKey: string; secondKey: string; [key: string]: string; // &amp;lt;-この行を追加! } const obj = { firstKey: &amp;#34;a&amp;#34;, secondKey: &amp;#34;b&amp;#34;, } as ISomeObject; const key: string = &amp;#39;secondKey&amp;#39;; const secondValue: string = obj[key]; なのでこうする.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ubuntu/</guid>
      <description>Ubuntuとは  コミュニティにより開発されているオペレーティングシステムのこと. 無料で提供されている. Linuxディストリビューションの1つ. 公式サイト: https://www.ubuntu.com  Raid0作成  Reference: How To Create RAID Arrays with mdadm on Ubuntu 18.04  ターミナルの色を変える ~/.bashrcの当該部分を以下の様に書き換える.
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\n\[\033[01;35m\]-&amp;gt; \$\[\033[00m\] &amp;#39; else PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; fi 再起動 sudo shutdown -r now // or sudo reboot mountしているSSDのlabel名を変更する Ubuntuのディスクプリで当該のSSDをmountする.
df -Th &amp;gt; Filesystem Type Size Used Avail Use% Mounted on &amp;gt; /dev/nvme2n1p1 ext4 234G 61M 222G 1% /media/solareenlo/ssd021 でSSDのFilesystem名(この場合は/dev/nvme2n1p1)を確認する.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/vim/</guid>
      <description>Vimとは  viから派生したテキストエディタ. プラグインを導入したり, .vimrcの設定を変更したりして, 自分好みにカスタマイズがどんどんできる. GitHubリポジトリ: https://github.com/vim/vim  .vimrcの例  solareenlo/vim-config よく使われているvimrcの設定ランキング  使い方 削除    コマンド 動作     D カーソル以降を削除    置換    コマンド 動作     :%s/old/new/c ファイル上のoldを1つずつ確認しながらnewに置換   :%s/old/new/g ファイル上の全てのoldをnewに置換   :s/old/new/g カーソル行の全てのoldをnewに置換   :10,20s/old/new/g 10~20行目の全てのoldをnewに置換   :&#39;&amp;lt;,&#39;&amp;gt;s/old/new/g ビジュアルモードで選択中の範囲の全てのoldをnewに置換.
&#39;&amp;lt;,&#39;&amp;gt;の部分は, 範囲を選択中に:を押すと自動的に出る.    外部コマンド実行 :!を使う.
vim # vimモードに突入 :!ls # lsを表示してくれる 新規にファイル作成 :eを使う.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/vps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/vps/</guid>
      <description> VPS(バーチャル・プライベート・サーバ)とは 一台の物理的なサーバコンピュータ上で仮想的なサーバコンピュータを何台も起動する技術によってつくられた仮想的なサーバコンピュータのこと. 暗号通貨のフルノードを立てることができる.
世界のVPSの値段比較サイト  VPSCOMP  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/white-paper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/white-paper/</guid>
      <description> ホワイトペーパーとは 問題に対する解決策を提示した文章のこと. 元々は政府や公的機関による年次報告書(白書)を意味したが現在ではマーケティング用語として使われている. 暗号通貨/暗号資産プロジェクトにおいてもよく使われている.
ホワイトペーパーの日本語訳一覧  Bitcoin: ビットコイン： P2P 電子通貨システム Ethereum: [Japanese] White Paper  Plasma: Plasma スケーラブルな自律型スマートコントラクト  IOTA: The Tangle Byteball: Byteball:価値の蓄積と移転のための分散型システム Nano: ナノ：手数料不要で分散された仮想通貨ネットワーク NEO: NEO：スマートな経済のための分散型ネットワーク Enigma: Enigma: プライバシーが保証された分散型コンピューティングプラットフォーム IPFS: IPFS POLKADOT: POLKADOT: VISION FOR A HETEROGENEOUS MULTI-CHAIN FRAMEWORK DRAFT 1  </description>
    </item>
    
    <item>
      <title>Bitcoin</title>
      <link>https://solareenlo.com/docs/bitcoin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/bitcoin/</guid>
      <description>Bitcoinとは GitHubリポジトリ: https://github.com/bitcoin
目的 匿名性を自分で選択できつつ, 安全に価値の移転と保存に特化したシステムを構築すること.
特徴  非中央集権 自律分散 トラストレス 耐改ざん性 オープンソース 匿名性を選択できる 二重支払いができない 払い(価値の保存と移転)に特化したとても堅牢なシステム(チューリング不完全/マルチシグ/HDウォレット/ニーモニック/Base58とか)  技術  電子署名 公開鍵暗号  楕円曲線DSA  ハッシュ関数 ネットワーク  P2P Proof of Work   プレイヤー  コア開発者 マイナー ユーザー 投資家・投機家 法律  スケーリング方法  コンセンサスアルゴリズムを速くする（分散性のために1ブロック生成にわざと10分かけてる） ブロックに含まれるトランザクションを増やす（Block weightが4MB以下/segwit導入により） オフチェーン（Lightning networkなど） サイドチェーン シャーディング Reference: ブロックチェーンとスケーラビリティ  フルノード フルノードの立て方  ビットコインのフルノードを立てる方法 Bitcoin ClockUpMemo bitcoindのブロック保存先ディレクトリを指定する Bitcoin.conf Configuration File  フルノードの分布図  BITNODES  マイナーとノードの違い  マイナーも1つのノードではあるが, マイナーの主な役割はプルーフオブワーク（PoW）を行い取引をブロックに収納しネットワークに送信すること.</description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>https://solareenlo.com/docs/ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ci-cd/</guid>
      <description> CI/CDとは ソフトウェアのビルド・テスト・デプロイを自動化することで, 1つ1つの工程が小さくなり, リスクマネージメントを容易にしたり, 変更に対するフィードバックを素早く得られたりする開発手法のこと.
CIとは  Continuous Integrationl（継続的インテグレーション）の略. ソフトウェア開発におけるビルドやテストを自動化したこと. ホスティングサービスへソースコードがコミットされると, CIによって自動的に「コードにエラーがないか」/「既存の機能を破壊していないか」といったテストが行える.  CDとは  Continuous Delivery（継続的デリバリー）の略. CIによってテストされたコードのマージや, 本番環境向けのビルドの作成を自動化したこと. 運用環境へのデプロイが明示的な承認なしで自動的に行われる「継続的デプロイ」とは異なる.  References  「CI/CD」とは CI/CDのエキスパートが解説：CI/CDとは何か？ なぜ今、必要とされるのか？  </description>
    </item>
    
    <item>
      <title>DB</title>
      <link>https://solareenlo.com/docs/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/db/</guid>
      <description> データベースとは  大量のデータを集めて, コンピューターでデータの追加, 削除, 検索をしやすい形に整理したもの. 有料/無料, オープンソース/非オープンソース, SQL型, NoSQL型, オブジェクト型, ドキュメント型, キー・バリュー型, グラフ型などいろんな種類がある.  NoSQLとSQLの違い    項目 NoSQL SQL     代表的なもの MongoDB, CouchDB MySQL, MS SQL   データ構造 データ構造を強制しない 厳密なデータ構造を適応   関係性 関係性にはフォーカスしていない 関係性がコアの機能   要素の在り方 独立したドキュメント レコードを関連付ける   用途 ログ, 注文, メッセージ ショッピングカート, コンタクト, ネットワーク    DBの使用率ランキング  DB-Engines Ranking  </description>
    </item>
    
    <item>
      <title>IOTA</title>
      <link>https://solareenlo.com/docs/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/iota/</guid>
      <description>IOTAとは Githubリポジトリ: https://github.com/iotaledger
目的  オープンIoTでブロックチェーンの良さ(分散性/耐改ざん性/オープン性)を使えるようにしつつ(スケーリング・マイニングコスト・トランザクションの承認の遅さを解決しつつ)インダストリー4.0を推し進めること. IOTA財団の目的は, オープンソースガバナンスを使用して, IOTAをゴールドスタンダード（主要組織や標準化団体と協力して, エンタープライズ対応DLT）にすること.  特徴  小さなデータの保存と交換に特化した設計. 平衡三進数を使用. 量子コンピュータ耐性のために電子署名にはWinternitz One Time Signatureを使用.  署名は使い捨てなので送金に使ったアドレスにもう1度入金すると盗まれる可能性特大. というか多額のIOTAを盗まれた実績有. 今はそうならないようにwalletが上手に管理してくれてる.  スケーリングのためにブロックは生成せずに各々のトランザクションがDAG形式で自分より前のトランザションを承認していく.  まだ発展途上なのでチェック機能が存在する. トランザクションはInput/Output/Remainderの3種類が1まとめになったBundleとしてTangle内を流れてる.  UTXOを採用.  trit, tryte  bit := trit  bit = (0, 1) trit = (-1, 0, 1)  byte := tryte  byte = 2^8 = 256 tryte = 3^3 = 27   単位変換  IOTA Converters  GitHubリポジトリ: hyperreality/iota-tools   ICC Network Visualisation  http://88.</description>
    </item>
    
    <item>
      <title>LaTeX</title>
      <link>https://solareenlo.com/docs/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/latex/</guid>
      <description> LaTeXとは  テキストベースの組版処理システムのこと. 学術機関における論文執筆ツールとしてよく使われている. GitHubリポジトリ: https://github.com/latex3/latex3  オンラインジェネレーター  Cloud LaTeX OverLeaf  </description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://solareenlo.com/docs/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/mongodb/</guid>
      <description>MongoDBとは  オープンソースで公開されているドキュメント指向データベースの1つ. GitHubリポジトリ: https://github.com/mongodb/mongo  インストール  https://docs.mongodb.com/manual/installation/  mongodb(v4.0.5)のコンソールからの使い方色々 Excel, Oracle, MongoDB, Object の大まかな比較    Excel Oracle MongoDB Object     ブック Schema Database 特になし   シート Table Collection 特になし   行 Row Document Object群   列 Column Field Key   セル Field Value Value    起動方法 $ mongod // mongodbが起動する $ CNTL-C // mongodbを停止する // か, $ sudo service mongod start $ sudo service mongod stop コンソールからのアクセス方法 $ mongo // アクセスして, &amp;gt; exit // 終了.</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://solareenlo.com/docs/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/mysql/</guid>
      <description>MySQLとは  オープンソースで公開されている関係データベース管理システム(RDBMS)の1つ. GitHubリポジトリ: https://github.com/mysql/mysql-server  MySQL(v14.14)の使い方 (Ver 14.14 Distrib 5.7.25, for Linux (x86_64))
MySQLのデータ構造 Database -&amp;gt; 複数のTable -&amp;gt; その中にid, title, bodyを持つ表があって, -&amp;gt; 行をRecord, Row, 列をField, Columと言う. こういったDatabaseやTableやFieldやRecordを扱う言語をSQL(Structured Query Language)と言う.
SQLの実行順番    順番 操作名 命令文     1 テーブルの指定 from   2 結合 on, join   3 取得条件 where   4 グループ化 group by   5 関数 count, sum, avg, min, max   6 having having   7 検索 select, distinct   8 順序 order by   9 limit limit    MySQLの基本的な使い方 # Ubuntuへのインストール sudo apt install mysql-server mysql-client # 起動確認 sudo service mysql status &amp;gt; mysql.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://solareenlo.com/docs/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ssh/</guid>
      <description>SSH(Secure Shell)とは 暗号や認証の技術を利用して, 安全にリモートコンピュータと通信するためのプロトコルのこと. VPSに接続するときは必須.
SSHの流れ Reference: SSH通信って、結局何してるの？
[local]1.通信用の秘密鍵・公開鍵の作成する. [local]2.サーバーに公開鍵を渡す. [server]A.サーバーにユーザーを登録する(sudo権限). [server]B.サーバーに登録されているユーザーと, 渡された公開鍵を紐づける. ※この状態で初めて作成したユーザーによるサーバーへのログインが可能となる. [local]3.作成したユーザーでログインする. [server]C.ログイン時に乱数を生成する. [server]D.Cで生成した乱数から, ハッシュ値を生成する. ※このハッシュ値は認証で使うのでサーバー側で保持しておく. [server]E.受け取った公開鍵 + Cで生成した乱数を用いて暗号を生成する. [server]F.Dで作成した暗号をローカルに送る. [local]4.1で作成した秘密鍵を用いて, 送られてきた暗号を解読し乱数を復元する. [local]5.乱数からハッシュ値を計算し, そのハッシュ値をサーバーに送る. [server]G.送られてきたハッシュ値と、Dで生成したハッシュ値を比較する. 一致していれば認証成功. 以後全ての通信は暗号化される. scp scpとはSSHを用いてファイルを秘匿化してコピーする技術のこと.
# sshのconfigファイルを用いて通信する方法 scp file_name.txt -F ~/.ssh/config iota3:~/github scp &amp;lt;渡したいファイルの名前&amp;gt; -F &amp;lt;コンフィグファイルの名前&amp;gt; &amp;lt;渡し先のマシン名&amp;gt;:&amp;lt;渡し先のディレクトリ&amp;gt; Mac -&amp;gt; Ubuntu を公開鍵暗号方式で接続する UbuntuをSSH接続可にする Ubuntu側で
sudo apt-get install openssh-server で, Ubuntu側へSSHで接続できるようになる.
Macで秘密鍵と公開鍵のペアを作成する まずMacで秘密鍵と公開鍵のペアを作成する.
ssh-keygen -t rsa &amp;gt; Generating public/private rsa key pair. &amp;gt; Enter file in which to save the key (/Users/solareenlo/.</description>
    </item>
    
    <item>
      <title>フルノード</title>
      <link>https://solareenlo.com/docs/bitcoin-fullnode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/bitcoin-fullnode/</guid>
      <description> フルノードとは  Bitcoinネットワークにおけるすべてのブロックとトランザクションをダウンロードして検証するノードのこと.  Bitcoinフルノードへのアクセス方法 bitcoin-cliを使ってアクセス cURLを使ってアクセス POSTを使ってアクセス </description>
    </item>
    
  </channel>
</rss>