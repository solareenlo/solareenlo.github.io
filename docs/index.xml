<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on solareenlo</title>
    <link>https://solareenlo.com/docs/</link>
    <description>Recent content in Docs on solareenlo</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://solareenlo.com/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/alpine-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/alpine-linux/</guid>
      <description> Alpine Linuxとは  muslとBusyBoxをベースとしたLinuxディストリビューションの1つ. セキュリティ・シンプル・リソース効率を重視するパワーユーザー向けに設計されている. とても軽量でセキュアなのでDockerのイメージ作りに使われる.  簡単な使い方 # gitをインストール apk add git</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/angular/</guid>
      <description>Angularとは Typescript/JavaScriptやその他の言語を使用してモバイルおよびデスクトップWebアプリケーションを構築するための開発プラットフォーム.
用語    用語 意味     モジュール アプリを構成するコンポーネントを束ねたもの   ルートモジュール アプリが起動する時に呼びされるモジュール   コンポーネント 各要素   デコレーター モジュールやクラスなどの要素に対してメタ情報を付与するもの    デコレーターのパラメーター    パラメーター名 意味     imports 現在のモジュールで利用する他のモジュール／コンポーネント   exports 現在のモジュールで外部に公開するコンポーネントなど   declarations モジュール配下のコンポーネント   bootstrap 最初に起動すべき最上位のコンポーネント(＝ルートコンポーネント)   templateUrl 描画するhtml   template 描画する内容   styleUrls どのcssを使うか   styles 直接cssの内容を記述する   selector コンポーネントの適応先を表す(html, css, classなどとして指定できる)    DockerでAngular Dockerfileの中身</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/aws/</guid>
      <description>アマゾンウェブサービス（AWS）とは Amazonが提供するパブリッククラウドコンピューティングのこと.
従量課金制.
コンピューティング, ストレージ, データベース, 分析, ネットワーキング, モバイル, 開発者用ツール, 管理ツール, IoT, セキュリティ, エンタープライズアプリケーションなど, グローバルなクラウドベース製品を幅広く利用できる.
S3 インターネット用のオブジェクトストレージサービスのこと.
Amazon Simple Storage Serviceの略.
Elastic Beanstalk Java, .NET, PHP, Node.js, Python, Ruby, GoおよびDockerを使用して開発されたウェブアプリケーションやサービスを, Apache, Nginx, Passenger, IISなどのサーバーでデプロイおよびスケーリングするためのサービスのこと.
IAM ユーザーに対してAWSへのアクセスを安全に制御するための仕組みのこと.
AWS Identity and Access Managementの略.
ECS Dockerアプリケーションをスケーラブルなクラスターで実行するために使用するサービスのこと.
Amazon Elastic Container Serviceの略.
RDS クラウド上でリレーショナルデータベースをセットアップ, 運用, スケーリングできるサービスのこと.
RDBで作ったコンテナの代わりに使える.
Amazon Relational Database Serviceの略.
Memcached 高パフォーマンスキャッシュやセッションストアとして使用できる, 分散型インメモリkey-valueストアのこと.
Redisで作ったコンテナの代わりに使える.
VPC AWSアカウント専用の仮想ネットワークのこと. 定義した仮想ネットワーク内でAWSリソースを起動することができる.
Amazon Virtual Private Cloudの略.
VPCセキュリティグループ 同一グループ外のインスタンスと通信を行う際のトラフィックを制御する仮想ファイアウォールのこと.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/blockchain/</guid>
      <description>Blockchainとは  正しい記録しか記録できず、記録を変更・改ざんできない。（耐改ざん性） 管理者不在で、参加者全員で共有・運用する。（非中央集権・トラストレス・自律的） ネットワーク共有型データベース。（分散型DB） 後方参照するハッシュポインタをもつ連結リスト Reference: ブロックチェーンのデータ構造をJavascriptで作ろう  Blockchainの仕組み  プロトコルに従った書式のDBだけが記録される。 参加者全員によって合意されたデータだけが有効となる。 一度書き込まれたデータは変更も削除もできない。 システム全体を止めることはほぼできない。 記録されるのは取引の履歴だけ。  BlockChainの歴史  1980年代のリバタリアニズム. 中央集権が可能な限り最小限でなければならいという考え. 政治的イデオロギー. 1990年代のサイファーパンクの結成  個人の通信における本当のプライバシーを我々に与える保障を、法的にではなく物理的・数学的に保証する。  サイファーパンクの理念  プライバシーというのは選択的に自己開示する力のことをいう。 開かれた社会においてはプライバシーには匿名の取引システムが必須だ。 我々サイファーパンクは匿名システムの建設に献身する。 Reference: ビットコインに実は４０年の歴史【サイファーパンク宣言を読む】全文和訳掲載   BlockChainにはブロックが必要？  台帳記録にはブロックは必須要素ではない. ブロックの承認のためのルールが記載されている. コンセンサスを駆動する本体はブロック ノードは単なるスクリプト処理系  BlockChainのコンセンサスによるガバナンス  ブロックチェーンノードが コンセンサスの主体 ブロックを承認する ブロック作成者（マイナー）は 信頼点ではない コンセンサスの結果（承認）に支配される Reference: 地域におけるブロックチェーン活用の可能性  BlockChainが発達すると消える産業  公証人 各種仲介業者（アート的発想で価値を判断する人は必要） 第一次産業・トレーサビリティー 貧困解消 裁判の証拠 References:  第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 3 第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 2   Blockchainの進化 パターン1  Blockchain 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/c/</guid>
      <description> C言語とは 1972年のAT&amp;amp;Tベル研究所で, ブライアン・カーニハンとデニス・リッチーによって開発された, コンパイル型の汎用プログラミング言語のこと.
Hello World #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;#34;Hello, world!&amp;#34;); return 0; } コンパイラ  低レイヤを知りたい人のためのCコンパイラ作成入門  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/circleci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/circleci/</guid>
      <description> CircleCIとは クラウド上でCI/CDを行なってくれるサービスの1つ.
docs  CircleCI Documentation  参考スライド  CircleCI 2.1の機能を使ってインフラの&amp;rdquo;ほぼ&amp;rdquo;全自動構成管理をやってみた話  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/cloud/</guid>
      <description> クラウドコンピューティングとは クラウドサービスプラットフォームからインターネット経由で処理能力, データベースストレージ, アプリケーション, および他のITリソースをオンデマンドかつ従量制料金で利用するシステムのこと.
比較  ilyas-it83/CloudComparer  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/command/</guid>
      <description>コマンドとは コンピュータに特定の機能の実行を指示する命令のこと. たくさんのコマンドがあり, 黒い画面に直接入力する.
psコマンド psコマンドはプロセスの動作状況を確認するためのコマンド.
auxオプション
auxオプションは、aとuとxというオプションを組み合わせたものです。
 a: 端末操作のプロセスを表示する u: CPUやメモリの使用率などを表示する x: 端末操作以外のプロセスを表示する  ps aux &amp;gt; USER PID %CPU %MEM VSZ RSS TT STAT STARTED TIME COMMAND &amp;gt; solareenlo 96263 4.3 2.0 5500012 168620 ?? S 水07PM 21:03.04 /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal &amp;gt; その他たくさん こんな感じで標準出力される.
Reference: ps auxの見方がよく判らない・・・
sha256を出力 # Mac shasum -a 256 &amp;lt;ファイル名&amp;gt; # Linux sha256sum &amp;lt;ファイル名&amp;gt; ファイルのユーザー所有権とグループ所有権を変更 ファイルのユーザー所有権とグループ所有権をrootからsolareenloへ変更する
sudo chown solareenlo:solareenlo ファイル名 基本的なUnixコマンドの使い方 mkdirを使って一気にファイルを複数作成する # app1, app2, .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/container/</guid>
      <description>コンテナ技術とは OS上に他のプロセスからは隔離されたアプリケーション実行環境を構築することで, 仮想的な動作環境をより少ないコンピュータリソースで実現する技術のこと.
Reference: コンテナ技術とは何？
コンテナとは  コンテンは仮想マシンの一種. コンテナ型仮想化という技術を使っている. 特徴  コンテナの容量が小さい 現実的な速度で, インターネット経由で受け渡しできる. 動作が軽い １つのホストOS上でたくさんのコンテナを動かすことができる.  そしてコンテナが増えすぎたので, 複数のコンテナを管理するコンテナ・オーケストレーションが生み出された.  Reference: Kubernetesってなにそれおいしいの？という人向けの超入門</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/crypto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/crypto/</guid>
      <description>暗号通貨/暗号資産とは 暗号技術を用いた通貨/資産のこと.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker-compose/</guid>
      <description>Docker Composeとは 複数のコンテナで構成されるアプリケーションを定義と実行するためのツールのこと. Dockerとは切り離されてる.
 Composeはアプリケーションのサービスをファイルで定義する. Dockerコマンドと高い親和性があるため, 学習コストが比較的低い. Swarmモードにサービスをデプロイできるオーケストレーション機能もある.  Reference: Docker Compose 徹底解説   活用場面  利用者視点  docker-compose.ymlがあれば, すぐに何でも実行できる.  開発者視点  環境の再構築が簡単 バージョン違いの環境を作りやすい 1つのマシン上に, 複数の環境を立ち上げられやすい   適切に書かれたYAMLファイルさえあれば, 誰でも簡単に環境構築もアプリケーション実行もできるのが強み.
インストール  https://docs.docker.com/compose/install/  docker-compose.ymlの書き方  services:(使うイメージ), networks:(使うネットワーク), volumes:(使うボリューム)を定義する. docker-compose.ymlの書き方 -&amp;gt; Docker Compose - docker-compose.yml リファレンス  公式Reference  Compose file version 3 reference  working directory指定 working_dirを使う.
version: &amp;#39;3&amp;#39; services: angular: image: angular-first-app ports: - &amp;#34;4200:4200&amp;#34; volumes: - .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker-hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker-hub/</guid>
      <description> Docker Hubとは コンテナイメージをビルドしたり配布したりする場所.
配布方法 イメージをそのままpush # 先ずはDocker Hubにログインする docker login # 自分の名前でtag付けしてイメージを作成する docker image build -t solareenlo/test . # そして, Docker Hubにpushする docker push solareenlo/test GitHubからDockerfileをpush </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker1/</guid>
      <description>Dockerとは コンテナ型の仮想環境を作成, 配布, 実行するためのプラットフォームのこと. プロセスを簡単にコンテナ化(isolate)し, 簡単かつ素早く開発・移動・実行できるプラットフォームのこと.
 Dockerコンテナは実行に必要な全てをパッケージして簡単に動かせる Dockerイメージは複数のイメージ・レイヤとメタ情報の積み重なりからできている. コンテナのプロセスはデフォルトでisolate(隔離・分離)された状態  Dockerについての良い読み物1→2018年なぜ私達はコンテナ/Dockerを使うのか. Dockerについての良い読み物2→標準化が進むコンテナとサーバーレス！ 「提供したい価値」から見極める活用の勘所とは【デブサミ2018 福岡】 Dockerについての良い説明→いまさらDockerに入門したので分かりやすくまとめます Dockerについての良いスライド→Docker Compose 徹底解説   Dockerのメリット/デメリット メリット  ゲストOSはホストのKernelを直接使うためオーバーヘッドが小さくて高速 ゲストOSがそれぞれにKernelを持たないため, Memory消費量やDisk消費量を節約できる 必要とする資源が少ないため, 多くのゲストOSを立ち上げることが可能 Kernelを新しく起動する必要がないため, ゲストOSの起動が速い コンテナのイメージ(雛形)からコンテナ(実体)を作るため, 同一構成のOSを簡単に複数作れる テストが通ったイメージは本番環境でもすぐに使える(開発とデプロイのサイクルが速い)  Reference: Dockerの利点   デメリット  提供できるホストの種類が少ない(ホストOSのKernelにLinux使ってたらゲストOSのKernelにWindows Serverは使えない) 完全仮想化に比べて, 管理者が学ぶべきことが多い  Reference: Dockerの欠点   なぜrootユーザーか Dockerはroot権限で動いているデーモン(dockerd)とunixソケットまたはtcp/ipで通信しているが, dockerdにアクセスするにはdockerグループに所属しているかroot権限が必要. そしてdockerはroot無しでアクセスできる様にすると簡単に権限昇格ができてしまい, いろんなことができる様になってしまうから.
Reference: Dockerでユーザーをdockerグループに追加することの危険性を理解しよう
インストール方法 Linux編 curl -fsSL get.docker.com -o get-docker.sh sh get-docker.sh 基本的な使い方(v18.09.5) Reference: Dockerコマンドメモ</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/docker2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/docker2/</guid>
      <description>Docker その2 コンテナの基本的な動かし方 # run = create + start docker run busybox echo hi there &amp;gt; hi there # コンテナ作ってスタートさせる docker create --name my-busybox busybox echo hi there docker start -a my-busybox &amp;gt; hi there # 一定期間後に終了 docker stop CONTAINER_NAME # 直ぐに終了 docker kill CONTAINER_NAME # Image,Container,Volumeの数や容量を表示 docker system df # 止まってるContainer, 使われてないVolume, 使われてないNetwork, 使われてないImageを削除 docker system prune # 現在動いているredisコンテナにアクセスする docker run --name myredis -d redis docker exec -it myredis redis-cli 127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/ethereum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ethereum/</guid>
      <description>Ethereumとは 目的 ブロックチェーン上でアプリを動かして, スマートコントラクトを実行できるようにし, 経済をさらに発展させる.
アプリの特徴: 分散型, 管理者不在, 一度デプロイすると修正不可
特徴  分散型アプリケーション(スマートコントラクト)のプラットフォーム 各ノードにバーチャルマシーン(通称: EVM)を積んでいるのでチューリング完全なスクリプトがEthereum上で書ける. アカウントベース ブロックチェーン2.0の代表格  スケーリング方法  サイドチェーン  Plasma: Ethereumのメインチェーンとは別のプラズマチェーンと呼ばれるサイドチェーンをマークル木状にどんどん連ねることで, メインチェーンに格納される情報量を減少させる仕組み. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 初心者向けプラズマ勉強法まとめノートー 0から3週間で学んだこと lightningとplasmaってなにが違うんですか？ Plasma スケーラブルな自律型スマートコントラクト  オフチェーン  Raiden Network: ブロックチェーン内の処理をブロックチェーンの外側に持っていくことで, メインチェーンの負担を軽減する仕組み. 最終的な取引結果のみをブロックチェーンで処理する.  シャーディング  トランザクション処理を各ノードで分割して行うことで, 処理速度の向上を図る仕組み. Ethereum2.0のCasperで導入されるPoSと相性が良い. Ethereumのシャーディング概論   スマートコントラクトとは  何人かが合意した内容（契約）を、ヒトがいなくても自動的に実行する仕組み  例は自動販売機   Ethereum dapps開発七つ道具  Solidity MetaMask Truffle, Ganache web3.js OpenZepplien Remix Google翻訳  と, 上記の内容を広く浅く説明してくれてるサイト
 EthereumとContracts開発を取り巻くエコシステムの概要  gethの使い方 gethとはGoで実装された完全なethereumノードを実行するためのコマンドラインインターフェースのこと.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/firebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/firebase/</guid>
      <description> Firebaseとは GCPのmobile Backend as a Service (mBaaS)のこと.
ハンズオン  web Android iOS  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/gcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/gcp/</guid>
      <description> Google Cloud Platform(GCP)とは Gogleが提供するパブリッククラウドコンピューティングのこと.
GKE コンテナ化されたアプリケーションをデプロイするためのマネージド型の本番環境のこと.
Google Kubernetes Engineの略.
Cloud Shell ブラウザでShellが扱える.
右上のメニューに起動するためのボタンがある.
# 使うプロジェクトの設定 gcloud config set project &amp;lt;プロジェクトID&amp;gt; # 使うゾーンの設定 gcloud config set compute/zone asia-east1-c # 使うコンテナクラスタを設定 gcloud container clusters get-credentials &amp;lt;クラスタ名&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/git/</guid>
      <description>Gitとは プログラムのソースコードなどの変更履歴を記録・追跡するための分散型バージョン管理システムのこと. とっても便利. 慣れてしまうともう後戻りはできない.
git補完 Reference: 「Git補完をしらない」「git statusを1日100回は使う」そんなあなたに朗報【git-completionとgit-prompt】
git-completion.bashをインストール git-completion.bash: gitコマンドの補完スクリプト. Tabで保管できる.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O ~/.git-completion.bash chmod a+x ~/.git-completion.bash echo &amp;#34;source ~/.git-completion.bash&amp;#34; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc git-prompt.shのインストール git-prompt.sh: プロンプトに各種追加情報を表示可能にするスクリプト.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -O ~/.git-prompt.sh chmod a+x ~/.git-prompt.sh 下記を一度にコピペしてエンターをして,
cat &amp;lt;&amp;lt; EOF | tee -a ~/.bashrc &amp;gt; /dev/null source ~/.git-prompt.sh GIT_PS1_SHOWDIRTYSTATE=true GIT_PS1_SHOWSTASHSTATE=true GIT_PS1_SHOWUNTRACKEDFILES=true GIT_PS1_SHOWUPSTREAM=&amp;#34;auto&amp;#34; GIT_PS1_SHOWCOLORHINTS=true EOF 下記を実行する.
source ~/.bashrc 新しいブランチの作成 ローカルブランチからブランチ作成 cd ディレクトリ // 作業ディレクトリに移動 git branch -a // branchの一覧を表示 git checkout master // master branchに切り替え git checkout -b 作成するbranch名 // masterを元にして新しいbranchを作成 git branch -a git push -u origin 作成したbranch名 // branchをremoteに登録 リモートブランチからブランチ作成 cd ディレクトリ git checkout -b ローカルに作成するブランチ名 origin/再生元のリモートブランチ名 git branch -a ブランチの削除 cd 作業ティレクトり git checkout -b master // 削除したいブランチとは違うブランチにまずは移動する git checkout -d 削除したいブランチ名 submodule submoduleの追加 git submodule add -b &amp;lt;リンク付けする方のブランチ名&amp;gt; &amp;lt;リンク付けする方のURL&amp;gt; &amp;lt;リンク付けされるディレクトリ名&amp;gt; # 例 git submodule add -b master git@github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/github/</guid>
      <description> GitHubとは ソフトウェア開発のプラットフォーム兼ソースコードなどのホスティングサービス.
GitHub Pagesで静的サイトを公開する cd 作業ディレクトリ名 git checkout -b gh-pages vim index.html // index.htmlを作成 git push -u origin gh-pages gh-pagesという名前のブランチにindex.htmlファイルを作っておけば, それが静的サイトとして「https://ユーザー名.github.io/リポジトリ名」として公開される.
リポジトリに他のリポジトリをリンク付けする git submodule add -b &amp;lt;リンク付けする方のブランチ名&amp;gt; &amp;lt;リンク付けする方のURL&amp;gt; &amp;lt;リンク付けされるディレクトリ名&amp;gt; リポジトリをforkして更新する fork -&amp;gt; clone -&amp;gt; remote -&amp;gt; fethc -&amp;gt; marge -&amp;gt; push
ssh接続ができなくなったときは ~/.ssh/configの中身を
Host github github.com Hostname github.com Port 22 User git IdentityFile ~/.ssh/id_git_rsa のように, Hostのところにgithub.comを追加してみる.
スライドショー  hiroppy/fusuma hakimel/reveal.js gnab/remark gitpitch/gitpitch  チートシート  Git Cheat Sheets  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/haskell/</guid>
      <description> Haskellとは 純粋な関数型プログラミング言語の1つ.
静的サイトジェネレーター  HAKYLL  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/hugo/</guid>
      <description>Hugoとは 静的なhtmlを生成する事ができる静的サイトジェネレータの1つ. Go言語で書かれてる. 記事を書くだけならGo言語を知らなくても良い. 記事はMarkdownで書ける.
.mdを削除した時に.htmlも同様に削除するオプション hugo server -D --cleanDestinationDir MacでHugoとGitHub Pagesを使ってのサイトの作り方 こちら
Hugoのコードの色選択  https://help.farbox.com/pygments.html Chroma Style Gallery  全文検索 Search for your Hugo Website
見た目変更 このサイトだと/サイトのディレクトリ/themes/book-fork/assets/の中の.scssファイルを操作する.
イラストの追加  このサイトだと/ブログのディレクトリ/layouts/shortcodes/fontawesome.htmlに
&amp;lt;span class=&amp;#34;inline-svg&amp;#34; &amp;gt; {{- $fname:=print &amp;#34;fontawesome/&amp;#34; ( .Get 0 ) &amp;#34;.svg&amp;#34; -}} {{- $path:=&amp;#34;&amp;lt;path&amp;#34; -}} {{- $fill:=&amp;#34;&amp;lt;path fill=\&amp;#34;currentColor\&amp;#34;&amp;#34; -}} {{ replace (readFile $fname) $path $fill | safeHTML }} &amp;lt;/span&amp;gt; を追加する.
 svgファイルをどこからかダウンロードしてくる. オススメはFontawesomeのGitHubリポジトリから目当てのsvgファイルを見つけて, curlとかで/ブログのディレクトリ/content/fontawesome/にダウンロードしてくる.
# GitHubのイラストだとこんな感じ. curl -O https://raw.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/jenkins/</guid>
      <description> Jenkinsとは  オンプレミスのCI/CDツール. Jenkinsが全てのビルドプロセスの自動化を行うものではない. テストやデプロイなどの各フェーズはそれぞれ専用のツールで自動化を行い, Jenkinsはどういったタイミングでどのツールを呼び出すのかを指示し, エラーが出たら即座にフィードバックを行う処理をする.  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/kubernetes/</guid>
      <description>Kubernetesとは Dockerコンテナのクラスタ管理を始めとしたオーケストレーションを行うサービスのこと. ホスト間の連携やデプロイについても総括的に管理できる(ここがDocker Composeと違うところ).
Reference: Docker Compose利用者から見た Kubernetes 開発環境構築入門
Kubernetesの大きな特徴の1つに宣言的設定がある. 宣言的設定とは, イミュータブルなインフラを作るための基本的な考え方で, 「システムのあるべき姿」を設定ファイルに宣言する！という考え方. Kubernetesは設定ファイルに書いたとおりのインフラを維持するように設計されている. ので, 設定ファイル(yamlファイル)をたくさん書く事になる.
他のオーケストレーションと違うところ ① 様々なOSSと組み合わせることにより, 柔軟に機能拡張なところ.
 コンテナ運用を更に効率化 / 高速化  詳細なメトリック監視と可視化・・・Prometheus + Grafana コンテナのログの転送収集・・・Fluentd / Fluent Bit ネットワークトラフィックの制御・・・ Istio + Envoy  Kubernetesの適応領域の拡大  機械学習プラットフォーム・・・Kubeflow 分散ストレージ・・・Rook 分散型データベース・・・Vitess   ② 本格的な宣言的オペレーションとInfrastructure as Codeを実現可能
③ クラスター上にデプロイするシステムの構成をコード(マニフェストファイル)によって定義できる
 運用オペレーションはコードの変更によって実施し, 作業を簡素化する. 複数Kubernetesクラスターでの相互運用を実現する  Reference: Kubernetesの基礎
Docker Composeとの違い Docker Composeは動作させるコンテナを意識するだけでほとんど良かったが, Kubernetesではそれに加えて動作させるホスト(Node)やコンテナのグループ化(Pod), その複製(ReplicaSet)と公開(Service, Ingress)といったインフラレベルで意識していたことも全て設定ファイルの1つとして管理できる.
Reference: Docker Compose利用者から見た Kubernetes 開発環境構築入門</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/nodejs/</guid>
      <description>Node.jsとは  サーバーサイドJavaScript環境のこと. サーバーサイドもJavaScripで記述できるようにした. シングルスレッドでノンブロッキングI/Oを行う.  インストール Mac: https://nodejs.org/en/
Ubuntu: Official Node.js binary distributions
テストツールの種類  テストの環境を提供する（Mocha, Jasmine, Jest, Karma） テストの構造を提供する（Mocha, Jasmine, Jest, Cucumber） アサーション機能を提供する（Chai, Jasmine, Jest, Unexpected） 生成, 表示, テスト結果をウォッチする（Mocha, Jasmine, Jest, Karma）
以前の実行時からの変更が意図されたものであることを確認するために, コンポーネントやデータ構造を生成し, スナップショットを比較する（Jest, Ava） モック, スパイ, スタブを提供する（Sinon, Jasmine, enzyme, Jest, testdouble) コードカバレッジのレポートを生成する（Istanbul, Jest) シナリオ実行の管理ができるブラウザ, または疑似ブラウザの環境を提供する（Protractor, Nightwatch, Phantom, Casper）  Reference: 2017年JavaScriptのテスト概論
日付を扱う  moment/moment iamkun/dayjs  引数で判定 引数1つでok. それ以外は強制終了する.
if(process.argv.length !== 3) { console.log(`csvファイル名を入力してください.`); process.exit(1); // 正常に強制終了する }  mapの中で非同期処理  Node 高階関数内での非同期処理（async/await）をどう書くか async/awaitやPromiseで簡単に配列のイテレーションできるようにする toniov/p-iteration  CSVを扱う  csv.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/npm/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/programming-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/programming-language/</guid>
      <description>プログラミング言語とは コンピュータに解釈できるようにつくられた人工言語. コンピュータへの指令であるプログラムを書くのに使われる. いろんな特徴を持っている.
いろんな指標によるランキング  TIOBE Index (TOIBEによる検索エンジンによる各種プログラミング言語の話題度ランキング) RedMonk (RedMonkによるランキング) Interactive: The Top Programming Languages 2018 (IEEEによる2018年度のランキング) PYPL PopularitY of Programming Language (PYPLによるGoogleによるチュートリアル検索ランキング)  プログラミング言語の型 代表的なもの3つ
   種類 説明     オブジェクト指向型 「モノ」を組み立てるように表現して, コンピュータに動作をさせる.   続き型 上から下まで単調なルールで文章を読むように動作する.   関数型プログラミング 数学の関数のイメージでデータに何かしらの処理をして答えを取得するように動作する.    オブジェクト指向プログラミング いろんな特徴.
   原則 説明     カプセル化 自由なアクセスからデータを保護する仕組み   継承 再利用性を高めて, 冗長性を避けるための強力なツール   ポリモーフィズム メッセージの送信側とメッセージの受信側が動的に決まる仕組み     オブジェクトは, オブジェクトに含まれるデータを操作する関数を有している.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/programming/</guid>
      <description>プログラミングとは コンピュータプログラムを作成することにより, 人間の意図した処理を行うようにコンピュータに指示を与える行為のこと. その為の便利なツールがたくさんある.
プログラミングをするのに役立つツール  プログラミング言語 (C, Java, JavaScript, Pythonなど)  手続き型, オブジェクト指向型, 関数型, 静的型付け, 動的型付けなどいろんな種類がある. 最終的にバイナリデータになって, コンピュータが処理する.  テキストエディタ (Visual Studio Code, Vimなど)  コードを書くのに役に立つエディタ.  統合開発環境 (Visual Studio, Jet Brainsなど)  コンパイル, テキストエディタ, デバッガなどを1つのソフトで行えるようにしたもの.  バージョン管理システム (gitなど)  ファイルの変更履歴を管理する為のシステム.  ホスティングサービス (GitHub, GitLabなど)  上記gitを使って様々なプログラムをweb上に公開したり, それを通じて交流したりすることができるサービス. 無償・有償がある.   勉強する  repl.it (オンラインIDE) hackr.io (コースやチュートリアルの紹介サイト)  ディベロッパーロードマップ  フロントエンド - https://roadmap.sh/frontend バックエンド - https://roadmap.sh/backend DevOps - https://roadmap.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/redis/</guid>
      <description>Redisとは ネットワーク接続された永続化可能なインメモリデータベースのひとつ. インメモリデータベースとは, メモリ上にデータを保存するタイプのデータベースのこと. メモリはCPUから直接アクセスできるため, （RDBなどの）ストレージにデータを保存するオンディスクDBに比べ, とても高速に動作することができる.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/rust/</guid>
      <description> Rustとは Mozillaが支援するオープンソースのシステムプログラミング言語のこと. 速度, 安全性, 平行性の3つのゴールにフォーカスしている.
Hello World! fn main() { // 世界よ、こんにちは  println!(&amp;#34;Hello, world!&amp;#34;); }  ドキュメントの日本語訳  Rustの日本語ドキュメント/Japanese Docs for Rust The Embedded Rust Book  チートシート  Rust Language Cheat Sheet  RustでOSを書く  Writing an OS in Rust (Second Edition)  リンク  Rustのリンク集  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/shell-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/shell-script/</guid>
      <description>シェルスクリプトとは シェルとはOSと対話するためのインターフェースであり, それのスクリプトがシェルスクリプト.
シェルスクリプトモードで実行するのとfilename.shを作って,
bash filename.sh で実行する2パターンあります.
チェック  ShellCheck  シェルスクリプトモードに突入 /bin/sh $ または
sh $ Hello World sh $ echo Hello World Hello World $ シェルスクリプトモードから脱出 CTLとdを押す.
初めてのシェルスクリプト # まず, bashがどこにあるか調べる which bash &amp;gt; /bin/bash  #!のことを「シェバン」もしくは「シバン」という. shell scriptファイルの頭に#! /bin/bashと書いてあげる.  vim hello i #i /bin/bash echo hello Esc :wq ls -l &amp;gt; -rw-rw-r--. 1 solareenlo solareenlo 24 日付 hello chmod +x hello ls -l &amp;gt; -rwxrwxr-x. 1 solareenlo solareenlo 24 日付 hello bash hello &amp;gt; hello 文字列を表示 # helloの中身 #!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/substrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/substrate/</guid>
      <description> Substrateとは カスタムブロックチェーンプログラムを開発するためのフレームワークのこと. Runtime, SRML, SKD, Client Appを作ることができる. オープンソースで提供されている. 開発元はParity Technologies.
 References:  第7回ブロックチェーン勉強会 なぜSubstrateでブロックチェーンを作るのか   Substrateを学んでみる  SubstrateKitties 初心者のためのPolkadot Polkadot / Substrateの必読資料をまとめた Staked Substrate/Polkadot  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/terminal/</guid>
      <description>ターミナルとは GUIの上でCUIの操作をしたいときに使用するアプリケーションのこと.
コンソール/ターミナル/シェルの違い  コンソールとは入出力をつかさどる端末ハードウェア ターミナルとはGUIでCUI環境を再現するもの シェルとはCUI環境におけるOSとの対話的インターフェイス  Reference: 【初心者向け】シェル・ターミナル・コンソールの違いとは？   下地にシェルがありコンソールやターミナルから命令をOSへ伝達してくれる.
コンソールでアクセスしてもターミナルでアクセスしても対話するものはシェルとなる.
コンソールの場合はハードウェア的に直にアクセスしているがターミナルの場合はGUI環境でソフトウェア的にシェルを呼び出し命令を実行するようになっている.
ターミナルの色を変える ~/.bashrcの当該部分を以下の様に書き換える.
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\n\[\033[01;35m\]-&amp;gt; \$\[\033[00m\] &amp;#39; else PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; fi ターミナルのJSON出力に色付けする jqを使う.
# こんな感じ echo &amp;#39;{&amp;#34;items&amp;#34;:[{&amp;#34;item_id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;すてきな雑貨&amp;#34;,&amp;#34;price&amp;#34;:2500},{&amp;#34;item_id&amp;#34;:2,&amp;#34;name&amp;#34;:&amp;#34;格好いい置物&amp;#34;,&amp;#34;price&amp;#34;:4500}]}&amp;#39; | jq . &amp;gt; { &amp;gt; &amp;#34;items&amp;#34;: [ &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 1, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;すてきな雑貨&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 2500 &amp;gt; }, &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 2, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;格好いい置物&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 4500 &amp;gt; } &amp;gt; ] &amp;gt; } Reference: jq コマンドを使う日常のご紹介</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/test/</guid>
      <description> テストとは 書いたコードにバグがないか確認する行為.
テストの種類  単体テスト: 入力をモック化し, 個々の関数やクラスをテストし, 出力結果が予想通りであることを確認するテスト. 統合テスト: いくつかのモジュールを組み合わせて予想通りに動作することを保証するテスト. 機能テスト: 製品自体を使って(例えばブラウザを使って), あるシナリオをテストする. 確実に想定した動作をするかといった内部構造は考慮しない. リグレッションテスト: プログラムに機能を追加したり変更を加えたことによって、今まで普通に動いていた部分が動かなくなっていないかを確認するテスト. 受け入れテスト: システム開発を外注して, 発注者の本来の目的や意図通りに稼働するかのテスト. References:  2017年JavaScriptのテスト概論 テストの種類と技法   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/travis-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/travis-ci/</guid>
      <description>Travis CIとは GitHub上のソフトウェアのビルドやテストを行う, オンラインで分散型の継続的インテグレーション(CI)サービスのこと.
https://travis-ci.org と https://travis-ci.com の両方があるけど, 今後は.comの方を使っていく方針.
Travis CiからAWS Elastic Beanstalkへ  AWS Elastic Beanstalk Deployment  Dokcerのテストがpassedにならない時の対処法 Travis CIでDockerのテストを以下のように設定するとpassedにならないことがある.
script: docker run solareenlo/react-test npm run test -- --coverage そんな時は以下のようにテストを設定する.
script: docker run -e CI=true solareenlo/react-test npm run test -- --watchAll=falseb 環境変数が設定できない時 Travis CIの環境変数を設定する項目では特殊文字(; &amp;amp; ( ) | ^ &amp;lt; &amp;gt; ? * [ ] $ ` &amp;lsquo; &amp;ldquo; \ ! { } 改行 タブ スペース)がそのままの入力ではエスケープされないので, シングルクォーテーション(&amp;ldquo;)で囲む必要がある.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/typescript/</guid>
      <description> TypeScriptとは マイクロソフトによって開発されているオープンソースのプログラミング言語のこと. JavaScriptに, 静的型付け・クラスベースオブジェクト指向を加えた.
初めてのTypeScript solareenlo/Typescript-Practice/01_Getting_Started
インストール npm i --save-dev typescript</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ubuntu/</guid>
      <description>Ubuntuとは コミュニティにより開発されているオペレーティングシステムのこと. 無料で提供されている. Linuxディストリビューションの1つ.
Raid0作成  Reference: How To Create RAID Arrays with mdadm on Ubuntu 18.04  ターミナルの色を変える ~/.bashrcの当該部分を以下の様に書き換える.
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\n\[\033[01;35m\]-&amp;gt; \$\[\033[00m\] &amp;#39; else PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; fi 再起動 sudo shutdown -r now // or sudo reboot mountしているSSDのlabel名を変更する Ubuntuのディスクプリで当該のSSDをmountする.
df -Th &amp;gt; Filesystem Type Size Used Avail Use% Mounted on &amp;gt; /dev/nvme2n1p1 ext4 234G 61M 222G 1% /media/solareenlo/ssd021 でSSDのFilesystem名(この場合は/dev/nvme2n1p1)を確認する.
sudo umount /dev/nvme2n1p1 で一度SSDをunmountする.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/vim/</guid>
      <description> Vimとは viから派生したテキストエディタ. プラグインを導入したり, .vimrcの設定を変更したりして, 自分好みにカスタマイズがどんどんできる.
外部コマンド実行 :!を使う.
vim # vimモードに突入 :!ls # lsを表示してくれる Vimの設定ファイル(.vimrc)の例  solareenlo/vim-config  オススメの使い方記事  References:  さっさと帰りたい怠け者エンジニアは vim をマスターしましょう その2 - 編集 さっさと帰りたい怠け者エンジニアは vim をマスターしましょう その1 - 基本と移動   プラグインマネージャー プラグインを簡単にインストールしてくれるやつ.
Shougo/dein.vim curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &amp;gt; installer.sh # For example, we just use `~/.cache/dein` as installation directory sh ./installer.sh ~/.cache/dein そして, vimを開いて,
:call dein#install() NERDTree ファイル操作    o(enter) ファイルを開く     go ファイルを開き、カーソルはツリーに保持する   t タブで開く   T タブで開き、移動はしない   i 水平分割して開く   gi 水平分割して開き、移動はしない   s 垂直分割して開く   gs 垂直分割して開き、移動はしない    ディレクトリ操作    コマンド 説明     o(enter) フォルダを開く   O 再帰的にディレクトリをすべて開く   x 親ディレクトリを閉じる   X 再帰的にすべての子ディレクトリを閉じる   e 新しいツリーを生成する    ツリー操作    コマンド 説明     P ルートディレクトリへ移動   p 親ディレクトリへ移動   K 一番上へ移動   J 一番下へ移動   Ctrl+k 一つ上へ移動   Ctrl+j 一つ下へ移動    ファイルシステム    コマンド 説明     C ツリーのルートを選択したディレクトリに変更   u ツリーのルートを上の階層にする   U 変更前のツリーの状態を保持して、ツリーのルートを上の階層にする   r 選択したディレクトリをリフレッシュする   R ツリーのルートをリフレッシュする   m メニューを表示する   cd 選択したディレクトリにcwdを変更する   CD cwdをツリールートに変更する    その他    コマンド 説明     I 隠しファイルの表示、非表示   B ブックマークの表示・非表示   F ファイルの表示・非表示    プラグインランキングサイト  VimAwesome  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/vps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/vps/</guid>
      <description> VPS(バーチャル・プライベート・サーバ)とは 一台の物理的なサーバコンピュータ上で仮想的なサーバコンピュータを何台も起動する技術によってつくられた仮想的なサーバコンピュータのこと. 暗号通貨のフルノードを立てることができる.
世界のVPSの値段比較サイト  VPSCOMP  SSH接続するには </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/white-paper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/white-paper/</guid>
      <description> ホワイトペーパーとは 問題に対する解決策を提示した文章のこと. 元々は政府や公的機関による年次報告書(白書)を意味したが現在ではマーケティング用語として使われている. 暗号通貨/暗号資産プロジェクトにおいてもよく使われている.
ホワイトペーパーの日本語訳一覧  Bitcoin: ビットコイン： P2P 電子通貨システム Ethereum: [Japanese] White Paper  Plasma: Plasma スケーラブルな自律型スマートコントラクト  IOTA: The Tangle Byteball: Byteball:価値の蓄積と移転のための分散型システム Nano: ナノ：手数料不要で分散された仮想通貨ネットワーク NEO: NEO：スマートな経済のための分散型ネットワーク IPFS: IPFS POLKADOT: POLKADOT: VISION FOR A HETEROGENEOUS MULTI-CHAIN FRAMEWORK DRAFT 1  </description>
    </item>
    
    <item>
      <title>Bitcoin</title>
      <link>https://solareenlo.com/docs/bitcoin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/bitcoin/</guid>
      <description>Bitcoinとは 目的 匿名性を自分で選択できつつ, 安全に価値の移転と保存に特化したシステムを構築すること.
特徴  非中央集権 自律分散 トラストレス 耐改ざん性 オープンソース 匿名性を選択できる 二重支払いができない 払い(価値の保存と移転)に特化したとても堅牢なシステム(チューリング不完全/マルチシグ/HDウォレット/ニーモニック/Base58とか)  技術  電子署名 公開鍵暗号  楕円曲線DSA  ハッシュ関数 ネットワーク  P2P Proof of Work   プレイヤー  コア開発者 マイナー ユーザー 投資家・投機家 法律  スケーリング方法  コンセンサスアルゴリズムを速くする（分散性のために1ブロック生成にわざと10分かけてる） ブロックに含まれるトランザクションを増やす（Block weightが4MB以下/segwit導入により） オフチェーン（Lightning networkなど） サイドチェーン シャーディング Reference: ブロックチェーンとスケーラビリティ  フルノード フルノードの立て方  ビットコインのフルノードを立てる方法 Bitcoin ClockUpMemo bitcoindのブロック保存先ディレクトリを指定する Bitcoin.conf Configuration File  フルノードの分布図  BITNODES  マイナーとノードの違い  マイナーも1つのノードではあるが, マイナーの主な役割はプルーフオブワーク（PoW）を行い取引をブロックに収納しネットワークに送信すること.</description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>https://solareenlo.com/docs/ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ci-cd/</guid>
      <description> CI/CDとは ソフトウェアのビルド・テスト・デプロイを自動化することで, 1つ1つの工程が小さくなり, リスクマネージメントを容易にしたり, 変更に対するフィードバックを素早く得られたりする開発手法のこと.
CIとは  Continuous Integrationl（継続的インテグレーション）の略. ソフトウェア開発におけるビルドやテストを自動化したこと. ホスティングサービスへソースコードがコミットされると, CIによって自動的に「コードにエラーがないか」/「既存の機能を破壊していないか」といったテストが行える.  CDとは  Continuous Delivery（継続的デリバリー）の略. CIによってテストされたコードのマージや, 本番環境向けのビルドの作成を自動化したこと. 運用環境へのデプロイが明示的な承認なしで自動的に行われる「継続的デプロイ」とは異なる.  References  「CI/CD」とは CI/CDのエキスパートが解説：CI/CDとは何か？ なぜ今、必要とされるのか？  </description>
    </item>
    
    <item>
      <title>DB</title>
      <link>https://solareenlo.com/docs/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/db/</guid>
      <description> データベースとは 大量のデータを集めて, コンピューターでデータの追加, 削除, 検索をしやすい形に整理したもの. 有料/無料, オープンソース/非オープンソース, SQL型, NoSQL型, オブジェクト型, ドキュメント型, キー・バリュー型, グラフ型などいろんな種類がある.
DBの使用率ランキング  DB-Engines Ranking  </description>
    </item>
    
    <item>
      <title>IOTA</title>
      <link>https://solareenlo.com/docs/iota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/iota/</guid>
      <description> IOTAとは 目的 オープンIoTでブロックチェーンの良さ(分散性/耐改ざん性/オープン性)を使えるようにしつつ(スケーリング・マイニングコスト・トランザクションの承認の遅さを解決しつつ)インダストリー4.0を推し進めること.
特徴  小さなデータの保存と交換に特化した設計. 平衡三進数を使用. 量子コンピュータ耐性のために電子署名にはWinternitz One Time Signatureを使用.  署名は使い捨てなので送金に使ったアドレスにもう1度入金すると盗まれる可能性特大. というか多額のIOTAを盗まれた実績有. 今はそうならないようにwalletが上手に管理してくれてる.  スケーリングのためにブロックは生成せずに各々のトランザクションがDAG形式で自分より前のトランザションを承認していく.  まだ発展途上なのでチェック機能が存在する. トランザクションはInput/Output/Remainderの3種類が1まとめになったBundleとしてTangle内を流れてる.  UTXOを採用.  DBのある所  iota.partners iri-playbook  C#  https://patriq.gitbook.io/iota/  </description>
    </item>
    
    <item>
      <title>LaTeX</title>
      <link>https://solareenlo.com/docs/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/latex/</guid>
      <description> LaTeXとは テキストベースの組版処理システムのこと. 学術機関における論文執筆ツールとしてよく使われている.
オンラインジェネレーター  Cloud LaTeX OverLeaf  </description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://solareenlo.com/docs/mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/mongodb/</guid>
      <description>MongoDBとは オープンソースで公開されているドキュメント指向データベースの1つ.
インストール  https://docs.mongodb.com/manual/installation/  mongodb(v4.0.5)のコンソールからの使い方色々 Excel, Oracle, MongoDB, Object の大まかな比較    Excel Oracle MongoDB Object     ブック Schema Database 特になし   シート Table Collection 特になし   行 Row Document Object群   列 Column Field Key   セル Field Value Value    mongodbの起動の仕方は, $ mongod // mongodbが起動する $ CNTL-C // mongodbを停止する // か, $ sudo service mongod start $ sudo service mongod stop mongodbへのコンソールからのアクセスの仕方は, $ mongo // アクセスして, &amp;gt; exit // 終了.</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://solareenlo.com/docs/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/mysql/</guid>
      <description>MySQLとは オープンソースで公開されている関係データベース管理システム(RDBMS)の1つ.
MySQL(v14.14)の使い方 (Ver 14.14 Distrib 5.7.25, for Linux (x86_64))
MySQLのデータ構造 Database -&amp;gt; 複数のTable -&amp;gt; その中にid, title, bodyを持つ表があって, -&amp;gt; 行をRecord, Row, 列をField, Columと言う. こういったDatabaseやTableやFieldやRecordを扱う言語をSQL(Structured Query Language)と言う.
SQLの実行順番    順番 操作名 命令文     1 テーブルの指定 from   2 結合 on, join   3 取得条件 where   4 グループ化 group by   5 関数 count, sum, avg, min, max   6 having having   7 検索 select, distinct   8 順序 order by   9 limit limit    MySQLの基本的な使い方 # Ubuntuへのインストール sudo apt install mysql-server mysql-client # 起動確認 sudo service mysql status &amp;gt; mysql.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://solareenlo.com/docs/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/ssh/</guid>
      <description>SSH(Secure Shell)とは 暗号や認証の技術を利用して, 安全にリモートコンピュータと通信するためのプロトコルのこと. VPSに接続するときは必須.
SSHの流れ Reference: SSH通信って、結局何してるの？
[local]1.通信用の秘密鍵・公開鍵の作成する. [local]2.サーバーに公開鍵を渡す. [server]A.サーバーにユーザーを登録する(sudo権限). [server]B.サーバーに登録されているユーザーと, 渡された公開鍵を紐づける. ※この状態で初めて作成したユーザーによるサーバーへのログインが可能となる. [local]3.作成したユーザーでログインする. [server]C.ログイン時に乱数を生成する. [server]D.Cで生成した乱数から, ハッシュ値を生成する. ※このハッシュ値は認証で使うのでサーバー側で保持しておく. [server]E.受け取った公開鍵 + Cで生成した乱数を用いて暗号を生成する. [server]F.Dで作成した暗号をローカルに送る. [local]4.1で作成した秘密鍵を用いて, 送られてきた暗号を解読し乱数を復元する. [local]5.乱数からハッシュ値を計算し, そのハッシュ値をサーバーに送る. [server]G.送られてきたハッシュ値と、Dで生成したハッシュ値を比較する. 一致していれば認証成功. 以後全ての通信は暗号化される. scp scpとはSSHを用いてファイルを秘匿化してコピーする技術のこと.
# sshのconfigファイルを用いて通信する方法 scp file_name.txt -F ~/.ssh/config iota3:~/github scp &amp;lt;渡したいファイルの名前&amp;gt; -F &amp;lt;コンフィグファイルの名前&amp;gt; &amp;lt;渡し先のマシン名&amp;gt;:&amp;lt;渡し先のディレクトリ&amp;gt; Mac -&amp;gt; Ubuntu を公開鍵暗号方式で接続する UbuntuをSSH接続可にする Ubuntu側で
sudo apt-get install openssh-server で, Ubuntu側へSSHで接続できるようになる.
Macで秘密鍵と公開鍵のペアを作成する まずMacで秘密鍵と公開鍵のペアを作成する.
ssh-keygen -t rsa &amp;gt; Generating public/private rsa key pair. &amp;gt; Enter file in which to save the key (/Users/solareenlo/.</description>
    </item>
    
    <item>
      <title>フルノード</title>
      <link>https://solareenlo.com/docs/bitcoin-fullnode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/bitcoin-fullnode/</guid>
      <description> フルノードとは  Bitcoinネットワークにおけるすべてのブロックとトランザクションをダウンロードして検証するノードのこと.  Bitcoinフルノードへのアクセス方法 bitcoin-cliを使ってアクセス cURLを使ってアクセス POSTを使ってアクセス </description>
    </item>
    
  </channel>
</rss>