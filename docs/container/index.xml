<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Conatainer on solareenlo</title><link>https://solareenlo.com/docs/container/</link><description>Recent content in Conatainer on solareenlo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://solareenlo.com/docs/container/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://solareenlo.com/docs/container/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/container/docker-compose/</guid><description>Docker Composeとは # 複数のコンテナで構成されるアプリケーションを定義と実行するためのツールのこと. Dockerとは切り離されてる. Composeはアプリケーションのサービスをファイルで定義する. Dockerコマンドと高い親和性があるため, 学習コストが比較的低い. Swarmモードにサービスをデプロイできるオーケストレーション機能もある. Reference: Docker Compose 徹底解説 GitHubリポジトリ: https://github.com/docker/compose 活用場面 # 利用者視点 docker-compose.ymlがあれば, すぐに何でも実行できる. 開発者視点 環境の再構築が簡単 バージョン違いの環境を作りやすい 1つのマシン上に, 複数の環境を立ち上げられやすい 適切に書かれたYAMLファイルさえあれば, 誰でも簡単に環境構築もアプリケーション実行もできるのが強み.
インストール # https://docs.docker.com/compose/install/ docker-compose.ymlの書き方 # services:(使うイメージ), networks:(使うネットワーク), volumes:(使うボリューム)を定義する. docker-compose.ymlの書き方 -&amp;gt; Docker Compose - docker-compose.yml リファレンス 公式Reference # Compose file version 3 reference working directory指定 # working_dirを使う.</description></item><item><title/><link>https://solareenlo.com/docs/container/docker-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/container/docker-hub/</guid><description>Docker Hubとは # コンテナイメージをビルドしたり配布したりする場所. 公式サイト: https://hub.docker.com 配布方法 # イメージをそのままpush # # 先ずはDocker Hubにログインする docker login # 自分の名前でtag付けしてイメージを作成する docker image build -t solareenlo/test . # そして, Docker Hubにpushする docker push solareenlo/test GitHubからDockerfileをpush #</description></item><item><title/><link>https://solareenlo.com/docs/container/docker1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/container/docker1/</guid><description>Dockerとは # コンテナ型の仮想環境を作成, 配布, 実行するためのプラットフォームのこと.
プロセスを簡単にコンテナ化(isolate)し, 簡単かつ素早く開発・移動・実行できるプラットフォームのこと.
Dockerコンテナは実行に必要な全てをパッケージして簡単に動かせる
Dockerイメージは複数のイメージ・レイヤとメタ情報の積み重なりからできている.
コンテナのプロセスはデフォルトでisolate(隔離・分離)された状態
Dockerについての良い読み物1→ 2018年なぜ私達はコンテナ/Dockerを使うのか.
Dockerについての良い読み物2→ 標準化が進むコンテナとサーバーレス！ 「提供したい価値」から見極める活用の勘所とは【デブサミ2018 福岡】
Dockerについての良い説明→ いまさらDockerに入門したので分かりやすくまとめます
Dockerについての良いスライド→ Docker Compose 徹底解説
公式サイト: https://www.docker.com
Dockerのメリット/デメリット # メリット # ゲストOSはホストのKernelを直接使うためオーバーヘッドが小さくて高速 ゲストOSがそれぞれにKernelを持たないため, Memory消費量やDisk消費量を節約できる 必要とする資源が少ないため, 多くのゲストOSを立ち上げることが可能 Kernelを新しく起動する必要がないため, ゲストOSの起動が速い コンテナのイメージ(雛形)からコンテナ(実体)を作るため, 同一構成のOSを簡単に複数作れる テストが通ったイメージは本番環境でもすぐに使える(開発とデプロイのサイクルが速い) Reference: Dockerの利点 デメリット # 提供できるホストの種類が少ない(ホストOSのKernelにLinux使ってたらゲストOSのKernelにWindows Serverは使えない) 完全仮想化に比べて, 管理者が学ぶべきことが多い Reference: Dockerの欠点 なぜrootユーザーか # Dockerはroot権限で動いているデーモン(dockerd)とunixソケットまたはtcp/ipで通信しているが, dockerdにアクセスするにはdockerグループに所属しているかroot権限が必要.</description></item><item><title/><link>https://solareenlo.com/docs/container/docker2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/container/docker2/</guid><description>Docker その2 # コンテナの基本的な動かし方 # # run = create + start docker run busybox echo hi there &amp;gt; hi there # コンテナ作ってスタートさせる docker create --name my-busybox busybox echo hi there docker start -a my-busybox &amp;gt; hi there # 一定期間後に終了 docker stop CONTAINER_NAME # 直ぐに終了 docker kill CONTAINER_NAME # Image,Container,Volumeの数や容量を表示 docker system df # 止まってるContainer, 使われてないVolume, 使われてないNetwork, 使われてないImageを削除 docker system prune # 現在動いているredisコンテナにアクセスする docker run --name myredis -d redis docker exec -it myredis redis-cli 127.</description></item><item><title/><link>https://solareenlo.com/docs/container/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/container/kubernetes/</guid><description>Kubernetesとは # Dockerコンテナのクラスタ管理を始めとしたオーケストレーションを行うサービスのこと. ホスト間の連携やデプロイについても総括的に管理できる(ここがDocker Composeと違うところ). Kubernetesの大きな特徴の1つに宣言的設定がある. 宣言的設定とは, イミュータブルなインフラを作るための基本的な考え方で, 「システムのあるべき姿」を設定ファイルに宣言する！という考え方. Kubernetesは設定ファイルに書いたとおりのインフラを維持するように設計されている. ので, 設定ファイル(yamlファイル)をたくさん書く事になる. Reference: Docker Compose利用者から見た Kubernetes 開発環境構築入門 GitHubリポジトリ: https://github.com/kubernetes 他のオーケストレーションと違うところ # ① 様々なOSSと組み合わせることにより, 柔軟に機能拡張なところ.
コンテナ運用を更に効率化 / 高速化 詳細なメトリック監視と可視化・・・Prometheus + Grafana コンテナのログの転送収集・・・Fluentd / Fluent Bit ネットワークトラフィックの制御・・・ Istio + Envoy Kubernetesの適応領域の拡大 機械学習プラットフォーム・・・Kubeflow 分散ストレージ・・・Rook 分散型データベース・・・Vitess ② 本格的な宣言的オペレーションとInfrastructure as Codeを実現可能
③ クラスター上にデプロイするシステムの構成をコード(マニフェストファイル)によって定義できる
運用オペレーションはコードの変更によって実施し, 作業を簡素化する. 複数Kubernetesクラスターでの相互運用を実現する Reference: Kubernetesの基礎
Docker Composeとの違い # Docker Composeは動作させるコンテナを意識するだけでほとんど良かったが, Kubernetesではそれに加えて動作させるホスト(Node)やコンテナのグループ化(Pod), その複製(ReplicaSet)と公開(Service, Ingress)といったインフラレベルで意識していたことも全て設定ファイルの1つとして管理できる.</description></item></channel></rss>