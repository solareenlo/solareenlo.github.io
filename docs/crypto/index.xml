<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crypto on solareenlo</title><link>https://solareenlo.com/docs/crypto/</link><description>Recent content in Crypto on solareenlo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://solareenlo.com/docs/crypto/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://solareenlo.com/docs/crypto/blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/blockchain/</guid><description>Blockchainとは 正しい記録しか記録できず、記録を変更・改ざんできない。（耐改ざん性） 管理者不在で、参加者全員で共有・運用する。（非中央集権・トラストレス・自律的） ネットワーク共有型データベース。（分散型DB） 後方参照するハッシュポインタをもつ連結リスト Reference: ブロックチェーンのデータ構造をJavascriptで作ろう Blockchainの仕組み プロトコルに従った書式のDBだけが記録される。 参加者全員によって合意されたデータだけが有効となる。 一度書き込まれたデータは変更も削除もできない。 システム全体を止めることはほぼできない。 記録されるのは取引の履歴だけ。 BlockChainの歴史 1980年代のリバタリアニズム. 中央集権が可能な限り最小限でなければならいという考え. 政治的イデオロギー. 1990年代のサイファーパンクの結成 個人の通信における本当のプライバシーを我々に与える保障を、法的にではなく物理的・数学的に保証する。 サイファーパンクの理念 プライバシーというのは選択的に自己開示する力のことをいう。 開かれた社会においてはプライバシーには匿名の取引システムが必須だ。 我々サイファーパンクは匿名システムの建設に献身する。 Reference: ビットコインに実は４０年の歴史【サイファーパンク宣言を読む】全文和訳掲載 BlockChainにはブロックが必要？ 台帳記録にはブロックは必須要素ではない. ブロックの承認のためのルールが記載されている. コンセンサスを駆動する本体はブロック ノードは単なるスクリプト処理系 BlockChainのコンセンサスによるガバナンス ブロックチェーンノードが コンセンサスの主体 ブロックを承認する ブロック作成者（マイナー）は 信頼点ではない コンセンサスの結果（承認）に支配される Reference: 地域におけるブロックチェーン活用の可能性 BlockChainが発達すると消える産業 公証人 各種仲介業者（アート的発想で価値を判断する人は必要） 第一次産業・トレーサビリティー 貧困解消 裁判の証拠 References: 第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 3 第21 『#ブロックチェーンビジネスに今すぐ参入すべき？』Part2 2 Blockchainの進化 パターン1 Blockchain 1.</description></item><item><title/><link>https://solareenlo.com/docs/crypto/crypto-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/crypto-docs/</guid><description>暗号資産の日本語訳ドキュメント Ethereum: https://github.com/a-mitani/mastering-ethereum Solidity: https://solidity-jp.readthedocs.io/ja/latest/ IPFS: https://github.com/a-mitani/ipfs-primer IOTA: https://docs.iotajapan.com NEM: https://nemtech.github.io/ja/ truffle: https://github.com/ZahanWu/truffle-docs-ja/wiki MakerDao: https://github.com/makerdao/community/tree/master/faqs/ja</description></item><item><title/><link>https://solareenlo.com/docs/crypto/ethereum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/ethereum/</guid><description>Ethereumとは GitHubリポジトリ: https://github.com/ethereum
目的 ブロックチェーン上でアプリを動かして, スマートコントラクトを実行できるようにし, 経済をさらに発展させる.
アプリの特徴: 分散型, 管理者不在, 一度デプロイすると修正不可
特徴 分散型アプリケーション(スマートコントラクト)のプラットフォーム 各ノードにバーチャルマシーン(通称: EVM)を積んでいるのでチューリング完全なスクリプトがEthereum上で書ける. アカウントベース ブロックチェーン2.0の代表格 スケーリング方法 サイドチェーン Plasma: Ethereumのメインチェーンとは別のプラズマチェーンと呼ばれるサイドチェーンをマークル木状にどんどん連ねることで, メインチェーンに格納される情報量を減少させる仕組み. エンドユーザーが出金したいときはルートチェーンに問い合わせる. 初心者向けプラズマ勉強法まとめノートー 0から3週間で学んだこと lightningとplasmaってなにが違うんですか？ Plasma スケーラブルな自律型スマートコントラクト オフチェーン Raiden Network: ブロックチェーン内の処理をブロックチェーンの外側に持っていくことで, メインチェーンの負担を軽減する仕組み. 最終的な取引結果のみをブロックチェーンで処理する. シャーディング トランザクション処理を各ノードで分割して行うことで, 処理速度の向上を図る仕組み. Ethereum2.0のCasperで導入されるPoSと相性が良い. Ethereumのシャーディング概論 スマートコントラクトとは 何人かが合意した内容（契約）を、ヒトがいなくても自動的に実行する仕組み 例は自動販売機 Ethereum dapps開発七つ道具 Solidity MetaMask Truffle, Ganache web3.js OpenZepplien Remix Google翻訳 と, 上記の内容を広く浅く説明してくれてるサイト</description></item><item><title/><link>https://solareenlo.com/docs/crypto/substrate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/substrate/</guid><description>Substrateとは カスタムブロックチェーンプログラムを開発するためのフレームワークのこと. Runtime, SRML, SKD, Client Appを作ることができる. オープンソースで提供されている. 開発元は Parity Technologies. Githubリポジトリ: https://github.com/paritytech/substrate References: 第7回ブロックチェーン勉強会 なぜSubstrateでブロックチェーンを作るのか Substrateを学んでみる SubstrateKitties 初心者のためのPolkadot Polkadot / Substrateの必読資料をまとめた Staked Substrate/Polkadot</description></item><item><title/><link>https://solareenlo.com/docs/crypto/white-paper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/white-paper/</guid><description>ホワイトペーパーとは 問題に対する解決策を提示した文章のこと. 元々は政府や公的機関による年次報告書(白書)を意味したが現在ではマーケティング用語として使われている. 暗号通貨/暗号資産プロジェクトにおいてもよく使われている. ホワイトペーパーの日本語訳一覧 Bitcoin: ビットコイン： P2P 電子通貨システム Ethereum: [Japanese] White Paper Plasma: Plasma スケーラブルな自律型スマートコントラクト IOTA: The Tangle Byteball: Byteball:価値の蓄積と移転のための分散型システム Nano: ナノ：手数料不要で分散された仮想通貨ネットワーク NEO: NEO：スマートな経済のための分散型ネットワーク Enigma: Enigma: プライバシーが保証された分散型コンピューティングプラットフォーム IPFS: IPFS POLKADOT: POLKADOT: VISION FOR A HETEROGENEOUS MULTI-CHAIN FRAMEWORK DRAFT 1</description></item><item><title>Bitcoin</title><link>https://solareenlo.com/docs/crypto/bitcoin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/bitcoin/</guid><description>Bitcoinとは GitHubリポジトリ: https://github.com/bitcoin
目的 匿名性を自分で選択できつつ, 安全に価値の移転と保存に特化したシステムを構築すること.
特徴 非中央集権 自律分散 トラストレス 耐改ざん性 オープンソース 匿名性を選択できる 二重支払いができない 払い(価値の保存と移転)に特化したとても堅牢なシステム(チューリング不完全/マルチシグ/HDウォレット/ニーモニック/Base58とか) 技術 電子署名 公開鍵暗号 楕円曲線DSA 暗号学的ハッシュ関数 現像計算困難性 (ハッシュ値から元のメッセージを復元できない) 第二現像計算困難性 (同じハッシュ値になる任意のメッセージがない) 衝突安全性 (任意のメッセージのハッシュ値が衝突しない) ネットワーク P2P Proof of Work スタックマシン ブロック スクリプト オペコード マークル木 コンセンサスアルゴリズム プレイヤー コア開発者 マイナー ユーザー 投資家・投機家 法律 スケーリング方法 コンセンサスアルゴリズムを速くする（分散性のために1ブロック生成にわざと10分かけてる） ブロックに含まれるトランザクションを増やす（Block weightが4MB以下/segwit導入により） オフチェーン（Lightning networkなど） サイドチェーン シャーディング Reference: ブロックチェーンとスケーラビリティ フルノード フルノードの立て方 ビットコインのフルノードを立てる方法 Bitcoin ClockUpMemo bitcoindのブロック保存先ディレクトリを指定する Bitcoin.</description></item><item><title>IOTA</title><link>https://solareenlo.com/docs/crypto/iota/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/iota/</guid><description>IOTAとは Githubリポジトリ: https://github.com/iotaledger
目的 オープンIoTでブロックチェーンの良さ(分散性/耐改ざん性/オープン性)を使えるようにしつつ(スケーリング・マイニングコスト・トランザクションの承認の遅さを解決しつつ)インダストリー4.0を推し進めること. IOTA財団の目的は, オープンソースガバナンスを使用して, IOTAをゴールドスタンダード（ 主要組織や 標準化団体と協力して, エンタープライズ対応DLT）にすること. 特徴 小さなデータの保存と交換に特化した設計. 平衡三進数を使用. 量子コンピュータ耐性のために電子署名には Winternitz One Time Signatureを使用. 署名は使い捨てなので送金に使ったアドレスにもう1度入金すると盗まれる可能性特大. というか多額のIOTAを盗まれた実績有. 今はそうならないようにwalletが上手に管理してくれてる. スケーリングのためにブロックは生成せずに各々のトランザクションがDAG形式で自分より前のトランザションを承認していく. まだ発展途上なのでチェック機能が存在する. トランザクションはInput/Output/Remainderの3種類が1まとめになったBundleとしてTangle内を流れてる. UTXOを採用. CfBによる技術的特徴 IoTは, インターネットを介して通信するものではありません. この誤解は, インターネット用の既存のソリューションを別の名前で販売しようとしている企業によって生み出されました. モノは, インターネットよりもはるかに大きい, 独自のネットワークを形成します. そのようなネットワークは, すべてのトラフィックが少数の組織によって制御されている少数のサーバーを通過するアーキテクチャを使用して拡張することはできません. Tangleは1つだけであり, それだけです. いくつかのIOTAフォークを実行しても, それらはすべて単一のTangleで機能し, 理論的には後でマージすることができます. IOTAを実行している異なるクラスターは, Tangleに絡み合って異なるサブタングルを形成します. これは, モバイルのモノがあるクラスタから別のクラスタに移動するときに便利な機能です. IOTAを実行しているノードのネットワークは, 1/3未満の要素の障害が重要ではないシステムです. もしそうならノードソフトウェアはこの機能を念頭に置いて開発されるべきです. 特に, グリッチが発生した場合は, ノードを再起動し, 必要に応じてストレージをクリアすることができます. IOTA上に構築されたソフトウェアは, そのノードが常に信頼できる状態で動作すると想定してはいけません. ソフトウェアは少なくとも3つのノードに接続し, それらのクォーラム(67％+)によって提供される情報に依存します. IOTAプロトコルは不変なものです.</description></item><item><title>NEM</title><link>https://solareenlo.com/docs/crypto/nem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/nem/</guid><description>NEMとは 暗号資産の1つ. コア開発者と NEM財団は全くの別物. GitHubリポジトリ: https://github.com/nemtech ドキュメント https://nemtech.github.io/ja/</description></item><item><title>フルノード</title><link>https://solareenlo.com/docs/crypto/bitcoin-fullnode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/crypto/bitcoin-fullnode/</guid><description>フルノードとは Bitcoinネットワークにおけるすべてのブロックとトランザクションをダウンロードして検証するノードのこと. Bitcoinフルノードへのアクセス方法 bitcoin-cliを使ってアクセス cURLを使ってアクセス POSTを使ってアクセス</description></item></channel></rss>