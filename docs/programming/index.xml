<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on solareenlo</title><link>https://solareenlo.com/docs/programming/</link><description>Recent content in Programming on solareenlo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://solareenlo.com/docs/programming/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://solareenlo.com/docs/programming/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/command/</guid><description>コマンドとは コンピュータに特定の機能の実行を指示する命令のこと. たくさんのコマンドがあり, 黒い画面に直接入力する. Linuxでhtmlを開く xdg-open index.html UbuntuでChromeを開く google-chrome プロセスの動作状況 (ps) psコマンドはプロセスの動作状況を確認するためのコマンド.
auxオプション
auxオプションは、aとuとxというオプションを組み合わせたものです。
a: 端末操作のプロセスを表示する u: CPUやメモリの使用率などを表示する x: 端末操作以外のプロセスを表示する ps aux &amp;gt; USER PID %CPU %MEM VSZ RSS TT STAT STARTED TIME COMMAND &amp;gt; solareenlo 96263 4.3 2.0 5500012 168620 ?? S 水07PM 21:03.04 /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal &amp;gt; その他たくさん こんな感じで標準出力される.
Reference: ps auxの見方がよく判らない・・・
sha256を出力 # Mac shasum -a 256 &amp;lt;ファイル名&amp;gt; # Linux sha256sum &amp;lt;ファイル名&amp;gt; 所有権を変更 (chown) ファイルのユーザー所有権とグループ所有権をrootからsolareenloへ変更する</description></item><item><title/><link>https://solareenlo.com/docs/programming/fonts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/fonts/</guid><description>fonts おすすめフォント ターミナルに絵文字フォントを追加する GitHub: ryanoasis/nerd-fonts プログラミング用の日本語フォント GitHub: miiton/Cica Web 用フォント Google Fonts の Noto Sans JP google-webfonts-helper 日本語Webフォントの流行の最適化「NotoSans」「サブセット化」 日本語WEBフォントをサブセット化する際の参考文字列一覧 日本語WebフォントにNoto Sans CJK JPを指定する時に気を付けたこと</description></item><item><title/><link>https://solareenlo.com/docs/programming/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/git/</guid><description>Gitとは プログラムのソースコードなどの変更履歴を記録・追跡するための分散型バージョン管理システムのこと. 公式サイト: https://git-scm.com gitの構成 作業ディレクトリ ステージングエリア（インデックス） リポジトリ（ローカル, リモート） git補完 Reference: 「Git補完をしらない」「git statusを1日100回は使う」そんなあなたに朗報【git-completionとgit-prompt】
git-completion.bashをインストール git-completion.bash: gitコマンドの補完スクリプト. Tabで保管できる.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O ~/.git-completion.bash chmod a+x ~/.git-completion.bash echo &amp;#34;source ~/.git-completion.bash&amp;#34; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc git-prompt.shのインストール git-prompt.sh: プロンプトに各種追加情報を表示可能にするスクリプト.
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -O ~/.git-prompt.sh chmod a+x ~/.git-prompt.sh 下記を一度にコピペしてエンターをして,
cat &amp;lt;&amp;lt; EOF | tee -a ~/.bashrc &amp;gt; /dev/null source ~/.git-prompt.sh GIT_PS1_SHOWDIRTYSTATE=true GIT_PS1_SHOWSTASHSTATE=true GIT_PS1_SHOWUNTRACKEDFILES=true GIT_PS1_SHOWUPSTREAM=&amp;#34;auto&amp;#34; GIT_PS1_SHOWCOLORHINTS=true EOF 下記を実行する.
source ~/.bashrc branch local branchから新branch作成 cd ディレクトリ # 作業ディレクトリに移動 git branch -a # branchの一覧を表示 git checkout master # master branchに切り替え git checkout -b 作成するbranch名 # masterを元にして新しいbranchを作成 git branch -a git push -u origin 作成したbranch名 # branchをremoteに登録 リモートbranchから新branch作成 cd ディレクトリ git checkout -b ローカルに作成するbranch名 origin/再生元のリモートbranch名 git branch -a branchの削除 cd 作業ティレクトり git checkout -b master # 削除したいbranchとは違うbranchにまずは移動する git branch --delete 削除したいbranch名 # mergeしたbranchを削除 git branch -D 削除したいbranch名 # mergeしたかどうかは問わずに削除 remote remoteから特定のbranchを指定してcloneする git clone -b japanese git@github.</description></item><item><title/><link>https://solareenlo.com/docs/programming/github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/github/</guid><description>GitHubとは ソフトウェア開発のプラットフォーム兼ソースコードなどのホスティングサービス. https://github.com GitHubとGitLab同時にpush 先ずは普通にGitHubとGitLabにリポジトリを作成し, リモートリポジトリを追加する.
# GitLabのリポジトリをリモートに追加 git remote set-url --add origin git@gitlab.com/solareenlo/リポジトリ名.git # 確認 git remote -v &amp;gt; origin git@github.com:solareenlo/リポジトリ名.git (fetch) &amp;gt; origin git@github.com:solareenlo/リポジトリ名.git (push) &amp;gt; origin git@gitlab.com:solareenlo/リポジトリ名.git (push) # 以下を行うとGitHubとGitLabに同時にpushされる. git push -u origin master リポジトリに他のリポジトリをリンク付けする git submodule add -b &amp;lt;リンク付けする方のブランチ名&amp;gt; &amp;lt;リンク付けする方のURL&amp;gt; &amp;lt;リンク付けされるディレクトリ名&amp;gt; リポジトリをforkして更新する fork -&amp;gt; clone -&amp;gt; remote -&amp;gt; fetch -&amp;gt; marge -&amp;gt; push
ssh接続ができなくなったときは ~/.ssh/configの中身を
Host github github.com Hostname github.com Port 22 User git IdentityFile ~/.</description></item><item><title/><link>https://solareenlo.com/docs/programming/linter-formatter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/linter-formatter/</guid><description>Linterとは コードの間違いを指摘するもの. Formatterとは コードのスタイルを統一/調整するもの. Prettier JavaScript(including ES2017), JSX, Angular, Vue, Flow, TypeScrip,t CSS, Less, SCSS, HTML, JSON, GraphQL, Markdown, GFM, MDX, YAMLをフォーマットしてくれる. GitHubリポジトリ: prettier/prettier vimでの使い方 こちらの.vimrcの様に vim-prettierを設定する.
当該のディレクトリで,
yarn add prettier --dev --exact コードを開いて, コードの一番上に// @formatを記入して,
:w で, 自動でコードをフォーマットしてくれる. 4. Reference: prettier/vim-prettier</description></item><item><title/><link>https://solareenlo.com/docs/programming/password-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/password-manager/</guid><description>パスワードマネージャーとは パスワードを管理するアプリケーションのこと. オープンソースのパスワードマネージャー KeePass Bitwarden</description></item><item><title/><link>https://solareenlo.com/docs/programming/sed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/sed/</guid><description>sedとは 入力ストリーム（ファイルまたはパイプラインからの入力）に対してテキスト変換などのデータ処理をおこなうプログラム. 名称「sed」は「ストリームエディタ」を意味する英語「stream editor」から. .gitignoreの/distを削除 sed -i -e &amp;#34;/\/dist/d&amp;#34; .gitignore # -i: 上書き保存 # -e: 行の削除 # d: 行目を表す(上の例だと\distを含む行) 初めてのsed cat names.txt &amp;gt; 1 taguchi &amp;gt; 2 koji &amp;gt; 3 taro &amp;gt; 4 hanako &amp;gt; 5 yasuda # 3行目を削除して標準出力する sed -e &amp;#39;3d&amp;#39; names.txt # 3dのところが1つしかない場合は-eを省略できる sed &amp;#39;3d&amp;#39; names.txt &amp;gt; 1 taguchi &amp;gt; 2 koji &amp;gt; 4 hanako &amp;gt; 5 yasuda # sedして上書きしたい場合 sed -i &amp;#39;3d&amp;#39; names.txt # 上記をバックアップを取りながらしたい場合 sed -i.</description></item><item><title/><link>https://solareenlo.com/docs/programming/shell-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/shell-script/</guid><description>シェルスクリプトとは シェルとはOSと対話するためのインターフェースであり, それのスクリプトがシェルスクリプト. シェルスクリプトモードで実行するのとfilename.shを作って, bash filename.sh で実行する2パターンあります.
チェック ShellCheck シェルスクリプトモードに突入 /bin/sh $ または
sh $ Hello World sh $ echo Hello World Hello World $ シェルスクリプトモードから脱出 CTLとdを押す.
初めてのシェルスクリプト # まず, bashがどこにあるか調べる which bash &amp;gt; /bin/bash #!のことを「シェバン」もしくは「シバン」という. shell scriptファイルの頭に#! /bin/bashと書いてあげる. vim hello i #i /bin/bash echo hello Esc :wq ls -l &amp;gt; -rw-rw-r--. 1 solareenlo solareenlo 24 日付 hello chmod +x hello ls -l &amp;gt; -rwxrwxr-x.</description></item><item><title/><link>https://solareenlo.com/docs/programming/terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/terminal/</guid><description>ターミナルとは GUIの上でCUIの操作をしたいときに使用するアプリケーションのこと. コンソール/ターミナル/シェルの違い コンソールとは入出力をつかさどる端末ハードウェア ターミナルとはGUIでCUI環境を再現するもの シェルとはCUI環境におけるOSとの対話的インターフェイス Reference: 【初心者向け】シェル・ターミナル・コンソールの違いとは？ 下地にシェルがありコンソールやターミナルから命令をOSへ伝達してくれる.
コンソールでアクセスしてもターミナルでアクセスしても対話するものはシェルとなる.
コンソールの場合はハードウェア的に直にアクセスしているがターミナルの場合はGUI環境でソフトウェア的にシェルを呼び出し命令を実行するようになっている.
ターミナルの色を変える ~/.bashrcの当該部分を以下の様に書き換える.
if [ &amp;#34;$color_prompt&amp;#34; = yes ]; then PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;31m\]$(__git_ps1)\[\033[00m\]\n\[\033[01;35m\]-&amp;gt; \$\[\033[00m\] &amp;#39; else PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; fi ターミナルのJSON出力に色付けする jqを使う.
# こんな感じ echo &amp;#39;{&amp;#34;items&amp;#34;:[{&amp;#34;item_id&amp;#34;:1,&amp;#34;name&amp;#34;:&amp;#34;すてきな雑貨&amp;#34;,&amp;#34;price&amp;#34;:2500},{&amp;#34;item_id&amp;#34;:2,&amp;#34;name&amp;#34;:&amp;#34;格好いい置物&amp;#34;,&amp;#34;price&amp;#34;:4500}]}&amp;#39; | jq . &amp;gt; { &amp;gt; &amp;#34;items&amp;#34;: [ &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 1, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;すてきな雑貨&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 2500 &amp;gt; }, &amp;gt; { &amp;gt; &amp;#34;item_id&amp;#34;: 2, &amp;gt; &amp;#34;name&amp;#34;: &amp;#34;格好いい置物&amp;#34;, &amp;gt; &amp;#34;price&amp;#34;: 4500 &amp;gt; } &amp;gt; ] &amp;gt; } Reference: jq コマンドを使う日常のご紹介</description></item><item><title/><link>https://solareenlo.com/docs/programming/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/test/</guid><description>テストとは 書いたコードにバグがないか確認する行為. テストの種類 単体テスト: 入力をモック化し, 個々の関数やクラスをテストし, 出力結果が予想通りであることを確認するテスト. 統合テスト: いくつかのモジュールを組み合わせて予想通りに動作することを保証するテスト. 機能テスト: 製品自体を使って(例えばブラウザを使って), あるシナリオをテストする. 確実に想定した動作をするかといった内部構造は考慮しない. リグレッションテスト: プログラムに機能を追加したり変更を加えたことによって、今まで普通に動いていた部分が動かなくなっていないかを確認するテスト. 受け入れテスト: システム開発を外注して, 発注者の本来の目的や意図通りに稼働するかのテスト. References: 2017年JavaScriptのテスト概論 テストの種類と技法</description></item><item><title/><link>https://solareenlo.com/docs/programming/tmux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/tmux/</guid><description>tmux とは 端末多重化ソフトウェアの1つ． 単一のウィンドウで複数の端末セッションにアクセスできる． GitHub: tmux/tmux おすすめの設定ファイルの雛形 GitHub: gpakosz/.tmux</description></item><item><title/><link>https://solareenlo.com/docs/programming/vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/vim/</guid><description>Vimとは viから派生したテキストエディタ. プラグインを導入したり, .vimrcの設定を変更したりして, 自分好みにカスタマイズがどんどんできる. GitHubリポジトリ: https://github.com/vim/vim ソースからインストール スクラッチからインストール git clone git@github.com:vim/vim.git cd vim ./configure make sudo make install インストールし直す cd vim make distclean rm src/auto/config.cache ./configure make sudo make install clipboard機能とclientserver機能を付けてインストール cd /mnt/md0/github git clone git@github.com:vim/vim.git cd vim make distclean rm src/auto/config.cache # 必要なパッケージをインストール sudo apt install \ lua5.2 \ liblua5.2-dev \ luajit \ libluajit-5.2 \ ruby-dev \ xorg-dev # /usr/include/lua5.2/の中身を/usr/include/lua5.2/include/へコピーする cd /usr/include/lua5.</description></item><item><title/><link>https://solareenlo.com/docs/programming/vimium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/vimium/</guid><description>Vimiumとは Google Chromeをvimのキーバインドで操作できるChromeの拡張機能. GitHubリポジトリ: philc/vimium 操作方法 現在のページ ? show the help dialog for a list of all available keys h scroll left j scroll down k scroll up l scroll right gg scroll to top of the page G scroll to bottom of the page d scroll down half a page u scroll up half a page f open a link in the current tab F open a link in a new tab r reload gs view source i enter insert mode -- all commands will be ignored until you hit Esc to exit yy copy the current url to the clipboard yf copy a link url to the clipboard gf cycle forward to the next frame gF focus the main/top frame 新しいページ o Open URL, bookmark, or history entry O Open URL, bookmark, history entry in a new tab b Open bookmark B Open bookmark in a new tab 検索 / enter find mode -- type your search query and hit enter to search, or Esc to cancel n cycle forward to the next find match N cycle backward to the previous find match 履歴 H go back in history L go forward in history タブ J, gT go one tab left K, gt go one tab right g0 go to the first tab g$ go to the last tab ^ visit the previously-visited tab t create tab yt duplicate current tab x close current tab X restore closed tab (i.</description></item><item><title/><link>https://solareenlo.com/docs/programming/wiki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/wiki/</guid><description>wiki とは 不特定多数のユーザーが共同してウェブブラウザから直接コンテンツを編集するウェブサイトのこと． おすすめの wiki サービス https://scrapbox.io （markdown を使わない wiki の新しい形） https://notion.so （オールインワン wiki） https://roamresearch.com （関係性に特化した wiki）</description></item><item><title>HHKB</title><link>https://solareenlo.com/docs/programming/hhkb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://solareenlo.com/docs/programming/hhkb/</guid><description>HHKB とは 株式会社 PFU から提供されている，高性能コンパクトキーボードのこと． 特徴 独自のキー配列． キースイッチは静電容量無接点方式を採用． キーボードサイズは60％． Ubuntu 18.04 で HHKB HYBRID を使う方法 1. Ubuntu で英字キーボードを使えるようにする Refernce: Ubuntu 19.04で英語キーボードを使えるようにする方法 2. Ubuntu に HHKB を Bluetooth 接続する 操作方法は Keyboard の裏面に書いてある．</description></item></channel></rss>