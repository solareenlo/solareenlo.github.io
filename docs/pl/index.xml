<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Language on solareenlo</title>
    <link>https://solareenlo.com/docs/pl/</link>
    <description>Recent content in Programming Language on solareenlo</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://solareenlo.com/docs/pl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/angular/</guid>
      <description>Angularとは  Typescript/JavaScriptやその他の言語を使用してモバイルおよびデスクトップWebアプリケーションを構築するための開発プラットフォーム. GitHubリポジトリ: https://github.com/angular/angular References:  https://angular.io/docs https://angular.jp/docs https://angular.keicode.com    用語    用語 意味     module アプリを構成するコンポーネントを束ねたもの.   root module アプリが起動する時に呼びされる大元のモジュール.
Angularアプリには必ずある.   component View(画面の一部)を制御する.   template componentのUIをどのようにHTMLで表現するかを指定するもの.
.htmlのこと.   Decorators モジュールやクラスなどの要素に対してメタ情報を付与するもの   constructor TS, JSに付随するものでClassの初期化時に発動する   data binding コンポーネントにおいてテンプレートとクラス内の要素を繋ぐ仕組み.
テンプレートとコンポーネントのコードを繋ぐ方法   template reference variable #testを使って, そのDOM要素をtest変数で参照できるようにする仕組み.    Decoratorsのパラメーター    パラメーター名 意味     imports 現在のモジュールで利用する他のモジュール／コンポーネント   exports 現在のモジュールで外部に公開するコンポーネントなど   declarations モジュール配下のコンポーネント   bootstrap 最初に起動すべき最上位のコンポーネント(＝ルートコンポーネント)   templateUrl 描画するhtml   template 描画する内容   styleUrls どのcssを使うか   styles 直接cssの内容を記述する   selector コンポーネントの適応先を表す(html, css, classなどとして指定できる)    インストール npm i -g @angular/cli @angular/core バージョンアップ ng update @angular/cli @angular/core DockerでAngular Dockerfileの中身</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/c/</guid>
      <description>C言語とは  1972年のAT&amp;amp;Tベル研究所で, ブライアン・カーニハンとデニス・リッチーによって開発された, コンパイル型の汎用プログラミング言語のこと.  Hello World #include &amp;lt;stdio.h&amp;gt; int main(void) { puts(&amp;#34;Hello, world!&amp;#34;); return 0; } コンパイラ   低レイヤを知りたい人のためのCコンパイラ作成入門  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/css/</guid>
      <description>CSSとは  ウェブページのスタイルを指定するための言語. Cascading Style Sheetsの略.  Bootstrap  Webアプリケーションフレームワークの1つ.  グリッドシステム Reference: Bootstrapのグリッドシステムの使い方を初心者に向けておさらいする
&amp;lt;div class=&amp;#34;contaiiner&amp;#34;&amp;gt; /* 固定枠 */ &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; /* row枠 */ &amp;lt;div class=&amp;#34;col-xs-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* スマホ枠 */ &amp;lt;div class=&amp;#34;col-sm-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* タブレット枠 */ &amp;lt;div class=&amp;#34;col-md-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* PC枠 */ &amp;lt;div class=&amp;#34;col-lg-12&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; /* PC大枠 */ &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Reference: Bootstrapのグリッドシステムについてまとめてみた</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/haskell/</guid>
      <description>Haskellとは  純粋な関数型プログラミング言語の1つ. 公式サイト: https://www.haskell.org  静的サイトジェネレーター   HAKYLL  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/hugo/</guid>
      <description>Hugoとは  静的なhtmlを生成する事ができる静的サイトジェネレータの1つ. Go言語で書かれてる. 記事を書くだけならGo言語を知らなくても良い. 記事はMarkdownで書ける. GitHubリポジトリ: https://github.com/gohugoio/hugo  .mdを削除した時に.htmlも同様に削除するオプション hugo server -D --cleanDestinationDir MacでHugoとGitHub Pagesを使ってのサイトの作り方  こちら
Hugoのコードの色選択  https://help.farbox.com/pygments.html  Chroma Style Gallery  全文検索  Search for your Hugo Website
見た目変更 このサイトだと/サイトのディレクトリ/themes/book-fork/assets/の中の.scssファイルを操作する.
イラストの追加  このサイトだと/ブログのディレクトリ/layouts/shortcodes/fontawesome.htmlに  &amp;lt;span class=&amp;#34;inline-svg&amp;#34; &amp;gt; {{- $fname:=print &amp;#34;fontawesome/&amp;#34; ( .Get 0 ) &amp;#34;.svg&amp;#34; -}} {{- $path:=&amp;#34;&amp;lt;path&amp;#34; -}} {{- $fill:=&amp;#34;&amp;lt;path fill=\&amp;#34;currentColor\&amp;#34;&amp;#34; -}} {{ replace (readFile $fname) $path $fill | safeHTML }} &amp;lt;/span&amp;gt; を追加する.
svgファイルをどこからかダウンロードしてくる. オススメは Fontawesomeの GitHubリポジトリから目当ての svgファイルを見つけて, curlとかで/ブログのディレクトリ/content/fontawesome/にダウンロードしてくる.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/javascript/</guid>
      <description>JavaScriptとは  Webページを構成する全てのオブジェクトを操作できるプログラミング言語. 人間の顔に例えると以下のようなイメージ.  骨格がhtml お化粧がcss 表情がJavaScript    フレームワーク 比較   2019年イチ押しのJavaScriptフレームワークオーバービュー  JavaScript: フレームワーク React/Vue/Angularについて  2018 JavaScript Rising Stars  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/nodejs/</guid>
      <description>Node.jsとは  サーバーサイドJavaScript環境のこと. サーバーサイドもJavaScripで記述できるようにした. シングルスレッドでノンブロッキングI/Oを行う. GitHubリポジトリ: https://github.com/nodejs  インストール Mac: https://nodejs.org/en/
Ubuntu: Official Node.js binary distributions
テストツールの種類  テストの環境を提供する（ Mocha, Jasmine, Jest, Karma）   テストの構造を提供する（ Mocha, Jasmine, Jest, Cucumber） アサーション機能を提供する（ Chai, Jasmine, Jest, Unexpected） 生成, 表示, テスト結果をウォッチする（ Mocha, Jasmine, Jest, Karma）
以前の実行時からの変更が意図されたものであることを確認するために, コンポーネントやデータ構造を生成し, スナップショットを比較する（ Jest, Ava） モック, スパイ, スタブを提供する（ Sinon, Jasmine, enzyme, Jest, testdouble) コードカバレッジのレポートを生成する（Istanbul, Jest) シナリオ実行の管理ができるブラウザ, または疑似ブラウザの環境を提供する（ Protractor, Nightwatch, Phantom, Casper）  Reference: 2017年JavaScriptのテスト概論
日付を扱う   moment/moment  iamkun/dayjs  date-fns/date-fns  引数で判定 引数1つでok.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/npm/</guid>
      <description>NPM  Node.jsのパッケージ管理ツール. 公式サイト: https://npmjs.com  インストール npm自体のインストール   Downloading and installing Node.js and npm  npm自体のupdate npm update -y npm # もしくは npm install npm@latest -g npm自体のバージョン管理 Reference: How to Update Node.js to Latest Version (Linux, Ubuntu, OSX, Others)
パッケージのインストール npm i &amp;lt;パッケージ名&amp;gt; # 本番環境へインストール npm i -D &amp;lt;パッケージ名&amp;gt; # 開発環境へインストール パッケージの脆弱性確認 npm audit パッケージを最新へ npm outdated # 新しいバージョンを確認 npm install -g npm-check-updates # アップデートマネージャーをインストール ncu # 新しいバージョンを確認 ncu -u # package.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/programming-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/programming-language/</guid>
      <description>プログラミング言語とは  コンピュータに解釈できるようにつくられた人工言語. コンピュータへの指令であるプログラムを書くのに使われる. いろんな特徴を持っている.  いろんな指標によるランキング   TIOBE Index (TOIBEによる検索エンジンによる各種プログラミング言語の話題度ランキング)  RedMonk (RedMonkによるランキング)  Interactive: The Top Programming Languages 2018 (IEEEによる2018年度のランキング)  PYPL PopularitY of Programming Language (PYPLによるGoogleによるチュートリアル検索ランキング)  プログラミング言語の型 代表的なもの3つ
   種類 説明     オブジェクト指向型 「モノ」を組み立てるように表現して, コンピュータに動作をさせる.   続き型 上から下まで単調なルールで文章を読むように動作する.   関数型プログラミング 数学の関数のイメージでデータに何かしらの処理をして答えを取得するように動作する.    オブジェクト指向プログラミング いろんな特徴.
   原則 説明     カプセル化 自由なアクセスからデータを保護する仕組み   継承 再利用性を高めて, 冗長性を避けるための強力なツール   ポリモーフィズム メッセージの送信側とメッセージの受信側が動的に決まる仕組み     オブジェクトは, オブジェクトに含まれるデータを操作する関数を有している.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/react-static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/react-static/</guid>
      <description>React Staticとは  React Staticは, Reactとそのエコシステムをベースにした, 高速, 軽量, そして強力なプログレッシブ静的サイトジェネレータ. これは, Create React Appなどのツールで慣れていたシンプルさと開発者の経験に似ており, パフォーマンス, 柔軟性, およびユーザー/開発者の経験のために慎重に設計されている. GitHubリポジトリ: nozzle/react-static  エラー処理 Error: ENOSPC: System limit for number of file watchers reached, watchと出たら echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p </description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/react/</guid>
      <description>Reactとは  Facebookとコミュニティによって開発されているUIに特化したJavaScriptライブラリ. Facebookはコアの部分だけを作成して, コミュニティがその周りをどんどん作っている. Virtual DOM(仮想DOM)と呼ばれるレンダリング機構を採用している. Virtual DOMを採用しているので, ページに表示されている広いエリアの情報をJavaScriptで管理しておき、なにか変更があった場合に変更箇所のみを再描画するUIなどに向いている. GitHubリポジトリ: https://github.com/facebook/react/ Reference: Reactとは? – React入門  用語    名前 意味     Virtual DOM DOMを作るために必要な情報を持っているオブジェクト.Virtual DOMの内容を元にHTMLを作成してブラウザに描画する.   JSX Virtual DOMの元となる構文.Babelがscript要素の内容をブラウザが解釈できるように変換を行う.JSV -&amp;gt; JavaScriptと変換される.基本的にはHTMLと同じ記法.   コンポーネント 個々の部品HTMLのパーツをコンポーネント単位で管理し組み合わせてUIの作成を行う.   props 親コンポーネントから渡されたプロパティ不変のデータ   state そのコンポーネントが持っている状態可変のデータ    Reduxとは  Reactが扱うUIのstateを管理するためのフレームワーク. ReactはFluxを採用しているが, ReduxはFluxの概念を拡張してより扱いやすくしたもの. Reduxはstateを管理するフレームワークなのでReact以外にもAngularやjQueryとも併用できるがReactが一番相性が良い.  3大原則  Single source of truth (信頼できる唯一の情報源) State in read-only (stateは常に読み取り専用にする) Changes are made with pure functions (actionがstateを変更する際にreducerを通して行う)  要素    名前 機能     Action 入力内容を元にデータを作成する   ActionCreator    Store データを貯める   State    Reducer 前の状態から新しい状態への純粋な関数    図解 Flux</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/rust/</guid>
      <description>Rustとは  Mozillaが支援するオープンソースのシステムプログラミング言語のこと. 速度, 安全性, 平行性の3つのゴールにフォーカスしている. 主にC, C++に置き換わるものとされている. GitHubリポジトリ: https://github.com/rust-lang/rust  Rustの特徴 概要  C++に匹敵する実行速度や詳細なメモリ管理が実現できる. 不正なメモリ領域を指すポインタなどを許容しないといったメモリ安全性を保証している. マルチスレッドによる並列実行時のデータ競合をコンパイル時に排除する. 関数型言語由来の便利な機能, 代数的データ型とパターンマッチ, 型クラスによる多相関数, コンパイラによる型推論などを取り入れている. ガーベージコレクタのような複雑なランタイムをもっていない. 多言語関数インターフェースを用いて, 他のプログラミング言語との間で相互に関数を呼び出せる.  速度面  マシンコードへコンパイル  コンパイラがプログラムをマシンコード(プロセッサが理解できる機械語)へ変換する.   静的型付け言語  静的型付け言語は, 変数および関数の引数や戻り値などすべての値について, その型をコンパイル時に決定する. 動的型付け言語は, プログラムの実行時に実際の値を見て型を決定する.   ゼロコスト抽象化  ゼロコスト抽象化とは, プログラム言語が持つ抽象化(対象から注目すべき要素を重点的に抜き出して, 他は無視する手法)の仕組みが実行時のコスト(実行速度やメモリ使用量など)なしに動作すること.   ガーベージコレクションを行わない軽量なランタイム  安全面  Rustはコンパイル時の静的解析により以下の安全性を保証している. 型安全性  型安全性とは, 正しく型付けされたプログラムが不正な動作(未定義動作とも言う)をしないよう言語が定義されていること.   メモリ安全性  RustはCのようにメモリ内容への柔軟なアクセスができるが, Cと違い以下のようなメモリ安全性を保証する. データの転記の際のメモリ領域あふれを防ぐ. ポインタによる誤ったメモリ境域へのアクセスを防ぐ. 初期化前のメモリ領域へのアクセスを防ぐ. 解放後のメモリ領域へのアクセスを防ぐ.   マルチスレッドプログラミングにおけるデータ競合の回避  Rustでは型安全性とメモリ安全性に用いられるコンパイラの静的解析機能を使い, データ競合の可能性を検出できる.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://solareenlo.com/docs/pl/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://solareenlo.com/docs/pl/typescript/</guid>
      <description>TypeScriptとは  マイクロソフトによって開発されているオープンソースのプログラミング言語のこと. JavaScriptに, 静的型付け・クラスベースオブジェクト指向を加えた. GitHubリポジトリ: https://github.com/Microsoft/TypeScript  初めてのTypeScript  solareenlo/Typescript-Practice/01_Getting_Started
インストール npm i --save-dev typescript TypeScript + Node.js + Docker + Circle CI   TypeScript + Node.js プロジェクトのはじめかた2019  TypeScriptでExpress.js開発するときにやることまとめ (docker/lint/format/tsのまま実行/autoreload)  bitjson/typescript-starter  microsoft/TypeScript-Node-Starter  objectのkeyにstringを設定したら, object[key]でエラーになった時の対処法  tsconfigに--suppressImplicitAnyIndexErrorsを付け加える. ブラケット記法でプロパティにアクセスした時にany型を許容するのでとっても非推奨.   以下のようにkeyはstring型と明示する. 問題点はkeyが全てstring型になること. interface ISomeObject { firstKey: string; secondKey: string; [key: string]: string; // &amp;lt;-この行を追加! } const obj = { firstKey: &amp;#34;a&amp;#34;, secondKey: &amp;#34;b&amp;#34;, } as ISomeObject; const key: string = &amp;#39;secondKey&amp;#39;; const secondValue: string = obj[key]; なのでこうする.</description>
    </item>
    
  </channel>
</rss>